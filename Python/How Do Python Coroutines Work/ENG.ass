[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1152
PlayResY: 720

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Audio File: How Do Python Coroutines Work.mp4
Video File: How Do Python Coroutines Work.mp4
Video AR Mode: 4
Video AR Value: 1.600000
Video Zoom Percent: 0.500000
Scroll Position: 249
Active Line: 271
Video Position: 35976

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,26,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:04.38,0:00:08.13,Default,,0,0,0,,Hi, I'm A. Jesse Jiryu Davis
Dialogue: 0,0:00:08.13,0:00:12.66,Default,,0,0,0,,and I'm going to tell you how Python coroutines work.
Dialogue: 0,0:00:14.52,0:00:15.54,Default,,0,0,0,,Little about me,
Dialogue: 0,0:00:15.54,0:00:25.98,Default,,0,0,0,,I work for a MongoDB,I'm a staff engineer, there work on the Python and the C drivers for MongoDB.
Dialogue: 0,0:00:25.98,0:00:32.10,Default,,0,0,0,,Yes, we are hiring and I highly recommend working for MongoDB.
Dialogue: 0,0:00:32.10,0:00:40.44,Default,,0,0,0,,You can go to Mongo-jobs to see all of the jobs that we've got open.
Dialogue: 0,0:00:41.40,0:00:44.58,Default,,0,0,0,,And if you want more information about this talk,
Dialogue: 0,0:00:44.58,0:00:49.71,Default,,0,0,0,,I've set up a landing pages at bit.ly/coroutines
Dialogue: 0,0:00:49.71,0:00:56.37,Default,,0,0,0,,You can find links there to the code that I'm going to write right now,
Dialogue: 0,0:00:56.37,0:01:05.64,Default,,0,0,0,,and also to a chapter in the upcoming architecture of open source applications book
Dialogue: 0,0:01:05.94,0:01:16.05,Default,,0,0,0,,that I co-wrote with Guido Van Rossum that goes into far more depth and is a very detailed exposition of python coroutines work.
Dialogue: 0,0:01:17.16,0:01:22.83,Default,,0,0,0,,So the agenda for this demo is going to be a
Dialogue: 0,0:01:26.55,0:01:29.88,Default,,0,0,0,,callback-based async framework,
Dialogue: 0,0:01:29.88,0:01:35.40,Default,,0,0,0,,and once we've written that we're going to see that it's very efficient but also kind of a mess,
Dialogue: 0,0:01:35.40,0:01:42.54,Default,,0,0,0,,and so we're going to adapt that to a coroutine based framework instead.
Dialogue: 0,0:01:44.22,0:01:48.72,Default,,0,0,0,,So to begin with a callback based async framework,
Dialogue: 0,0:01:48.72,0:01:51.99,Default,,0,0,0,,It uses non-blocking sockets.
Dialogue: 0,0:01:52.98,0:01:54.81,Default,,0,0,0,,uses the callbacks,
Dialogue: 0,0:01:54.81,0:01:55.56,Default,,0,0,0,,of course,
Dialogue: 0,0:01:55.56,0:01:58.98,Default,,0,0,0,,and it also uses an event loop.
Dialogue: 0,0:02:00.42,0:02:02.85,Default,,0,0,0,,And as for coroutines,
Dialogue: 0,0:02:02.85,0:02:05.46,Default,,0,0,0,,well, we'll cross that bridge when we come to it.
Dialogue: 0,0:02:06.51,0:02:09.00,Default,,0,0,0,,So a little bit of setup,
Dialogue: 0,0:02:09.00,0:02:14.49,Default,,0,0,0,,I've written a simple web server and.
Dialogue: 0,0:02:18.75,0:02:21.06,Default,,0,0,0,,It can respond to an HTTP request.
Dialogue: 0,0:02:22.44,0:02:27.51,Default,,0,0,0,,I wrote this for a local python conference PyGotham 2015,
Dialogue: 0,0:02:27.51,0:02:32.73,Default,,0,0,0,,so you can see that it says hello to all of the incredible people there.
Dialogue: 0,0:02:32.73,0:02:37.02,Default,,0,0,0,,And the other interesting thing about this framework is its kind of slow.
Dialogue: 0,0:02:38.52,0:02:42.30,Default,,0,0,0,,This web server returns very simple response,
Dialogue: 0,0:02:42.30,0:02:47.61,Default,,0,0,0,,but I've coded it so that it takes almost a second to reply.
Dialogue: 0,0:02:47.61,0:02:50.55,Default,,0,0,0,,And so that's going to end up being very important,
Dialogue: 0,0:02:50.55,0:02:54.39,Default,,0,0,0,,because that's the sort of thing that async is optimized for.
Dialogue: 0,0:02:54.39,0:03:00.45,Default,,0,0,0,,Is for talking too slow servers or slow clients efficiently.
Dialogue: 0,0:03:02.49,0:03:04.38,Default,,0,0,0,,So let's see,
Dialogue: 0,0:03:04.38,0:03:11.28,Default,,0,0,0,,how would we fetch a URL in the kind of typical python way.
Dialogue: 0,0:03:14.61,0:03:19.62,Default,,0,0,0,,so we would need to import socket right?
Dialogue: 0,0:03:21.24,0:03:22.35,Default,,0,0,0,,And?
Dialogue: 0,0:03:30.66,0:03:34.11,Default,,0,0,0,,Connected to the proper domain and port.
Dialogue: 0,0:03:35.64,0:03:36.90,Default,,0,0,0,,we format a request
Dialogue: 0,0:03:48.87,0:03:50.58,Default,,0,0,0,,then we would send it to the server.
Dialogue: 0,0:03:51.75,0:03:54.27,Default,,0,0,0,,And I'm going to do this in Python 3
Dialogue: 0,0:03:54.27,0:03:59.82,Default,,0,0,0,,and so it's important to encode everything that we're going to send over the wire.
Dialogue: 0,0:03:59.82,0:04:00.00,Default,,0,0,0,,Oh,
Dialogue: 0,0:04:00.00,0:04:02.13,Default,,0,0,0,,and the other important thing to remember is that.
Dialogue: 0,0:04:04.59,0:04:12.75,Default,,0,0,0,,Each HTTP requests end in a double carriage return to a new line
Dialogue: 0,0:04:12.75,0:04:19.35,Default,,0,0,0,,so once we've sent the request were going to receive the response and that'll come back to us in chunks.
Dialogue: 0,0:04:19.35,0:04:23.31,Default,,0,0,0,,so we're just going to collect those in a list.
Dialogue: 0,0:04:28.65,0:04:30.81,Default,,0,0,0,,Receive them up to a thousand chunks
Dialogue: 0,0:04:30.81,0:04:33.21,Default,,0,0,0,,a thousand bytes at a time,
Dialogue: 0,0:04:33.21,0:04:35.40,Default,,0,0,0,,and as long as we've got a chunk.
Dialogue: 0,0:04:39.45,0:04:44.07,Default,,0,0,0,,will append it to the list and if we get an empty chunk,
Dialogue: 0,0:04:44.07,0:04:46.32,Default,,0,0,0,,then we know that the server is hung up on us.
Dialogue: 0,0:04:46.32,0:04:49.86,Default,,0,0,0,,so our reception is complete,
Dialogue: 0,0:04:49.86,0:04:52.92,Default,,0,0,0,,and so the body is going to be....
Dialogue: 0,0:04:56.16,0:04:59.64,Default,,0,0,0,,We'll use the empty bye to join all the chunks.
Dialogue: 0,0:05:00.75,0:05:03.90,Default,,0,0,0,,And then we'll decode that.
Dialogue: 0,0:05:05.82,0:05:07.29,Default,,0,0,0,,The utf-8 by default.
Dialogue: 0,0:05:08.49,0:05:17.28,Default,,0,0,0,,And then let's just prints the first line of the body.
Dialogue: 0,0:05:19.98,0:05:21.48,Default,,0,0,0,,So,
Dialogue: 0,0:05:21.48,0:05:23.13,Default,,0,0,0,,and since we're in an infinite loop,
Dialogue: 0,0:05:23.13,0:05:24.27,Default,,0,0,0,,we need to return,
Dialogue: 0,0:05:24.27,0:05:29.26,Default,,0,0,0,,so that's our get function and if we get that path Foo
Dialogue: 0,0:05:29.54,0:05:39.45,Default,,0,0,0,,and if I run this, you'll see that the first line of the response is an http 200 OK.
Dialogue: 0,0:05:40.98,0:05:41.58,Default,,0,0,0,,And?
Dialogue: 0,0:05:42.48,0:05:43.56,Default,,0,0,0,,Let's also see.
Dialogue: 0,0:05:45.18,0:05:46.32,Default,,0,0,0,,How long that took
Dialogue: 0,0:06:00.60,0:06:04.38,Default,,0,0,0,,So it takes about a second because there's a little bit of overhead in the Python interpreter.
Dialogue: 0,0:06:05.49,0:06:11.07,Default,,0,0,0,,the problem with this approach is that if we want to get 2 Urls,
Dialogue: 0,0:06:11.07,0:06:15.42,Default,,0,0,0,,it's going to take two seconds because we get them serially.
Dialogue: 0,0:06:17.07,0:06:24.63,Default,,0,0,0,,And the typical approach to this might be to launch these two operations on two threads,
Dialogue: 0,0:06:24.63,0:06:31.23,Default,,0,0,0,,but that might become inefficient if we're waiting for hundreds of slow requests,
Dialogue: 0,0:06:31.23,0:06:34.77,Default,,0,0,0,,and we have to spawn hundreds of threads for them.
Dialogue: 0,0:06:34.77,0:06:36.96,Default,,0,0,0,,There's a lot of overhead though it's not necessary,
Dialogue: 0,0:06:36.96,0:06:41.40,Default,,0,0,0,,so we're going to try out making an async framework to do it instead,
Dialogue: 0,0:06:41.40,0:06:49.05,Default,,0,0,0,,so that we don't have to spawn hundreds of threads in order to do hundreds of slow i/o operations,
Dialogue: 0,0:06:49.05,0:06:51.36,Default,,0,0,0,,we want to be more efficient than that.
Dialogue: 0,0:06:51.36,0:06:51.93,Default,,0,0,0,,So.
Dialogue: 0,0:06:53.07,0:07:00.75,Default,,0,0,0,,A async framework could uses non-blocking sockets and in python making socket non blocking is very simple.
Dialogue: 0,0:07:01.77,0:07:04.80,Default,,0,0,0,,Now what's going to happen if we run this?
Dialogue: 0,0:07:05.88,0:07:07.95,Default,,0,0,0,,We're going to get an exception because.
Dialogue: 0,0:07:09.54,0:07:15.39,Default,,0,0,0,,A non blocking socket what that means is any operation that would block,
Dialogue: 0,0:07:15.39,0:07:22.08,Default,,0,0,0,,like connecting,either succeeds immediately or raises an exception.
Dialogue: 0,0:07:22.08,0:07:22.35,Default,,0,0,0,,Right.
Dialogue: 0,0:07:22.35,0:07:23.79,Default,,0,0,0,,It's not allowed to block.
Dialogue: 0,0:07:23.79,0:07:27.03,Default,,0,0,0,,it's not allowed to wait for success.
Dialogue: 0,0:07:28.05,0:07:34.14,Default,,0,0,0,,So we need some way to wait for that to complete.
Dialogue: 0,0:07:35.49,0:07:37.41,Default,,0,0,0,,And the way we do that in Python.
Dialogue: 0,0:07:38.55,0:07:39.09,Default,,0,0,0,,Well,
Dialogue: 0,0:07:39.09,0:07:39.63,Default,,0,0,0,,first of all,
Dialogue: 0,0:07:39.63,0:07:47.37,Default,,0,0,0,,we can just ignore that error.
Dialogue: 0,0:07:48.51,0:07:50.36,Default,,0,0,0,,But that's not going to get us very far
Dialogue: 0,0:07:50.42,0:07:56.22,Default,,0,0,0,,because as soon as we tried to send something of the socket is going to say that it's not connected yet right
Dialogue: 0,0:07:56.32,0:08:00.00,Default,,0,0,0,,because when we called connect,
Dialogue: 0,0:08:00.00,0:08:02.79,Default,,0,0,0,,the non-blocking socket began the operation.
Dialogue: 0,0:08:02.79,0:08:05.13,Default,,0,0,0,,But it didn't wait for the operation to complete.
Dialogue: 0,0:08:05.13,0:08:06.90,Default,,0,0,0,,And so we're not ready to send it yet.
Dialogue: 0,0:08:07.86,0:08:12.87,Default,,0,0,0,,So how do we know when we're ready to send an operation?
Dialogue: 0,0:08:14.22,0:08:15.45,Default,,0,0,0,,Well,
Dialogue: 0,0:08:15.45,0:08:16.62,Default,,0,0,0,,python 3.
Dialogue: 0,0:08:19.05,0:08:21.57,Default,,0,0,0,,There's this handy module called selectors.
Dialogue: 0,0:08:24.36,0:08:28.35,Default,,0,0,0,,In every operating system since time immemorial,
Dialogue: 0,0:08:28.35,0:08:34.44,Default,,0,0,0,,there has been some way to wait for some event on a non blocking socket.
Dialogue: 0,0:08:34.44,0:08:35.10,Default,,0,0,0,,Originally,
Dialogue: 0,0:08:35.10,0:08:37.86,Default,,0,0,0,,there was the system call select,
Dialogue: 0,0:08:37.86,0:08:39.06,Default,,0,0,0,,and then over time,
Dialogue: 0,0:08:39.06,0:08:43.26,Default,,0,0,0,,more and more scalable versions of select have been invented.
Dialogue: 0,0:08:43.26,0:08:46.08,Default,,0,0,0,,Like poll on Linux,
Dialogue: 0,0:08:46.08,0:08:50.46,Default,,0,0,0,,epoll on Bsd and Mac kqueue on windows.
Dialogue: 0,0:08:50.46,0:08:52.86,Default,,0,0,0,,there's these I/O completion ports.
Dialogue: 0,0:08:54.21,0:08:56.40,Default,,0,0,0,,The nice thing about Python 3.4
Dialogue: 0,0:08:57.99,0:09:03.39,Default,,0,0,0,,Is that you can just ask it for a default selector,
Dialogue: 0,0:09:03.39,0:09:14.16,Default,,0,0,0,,and it will figure out what your running and give you the most efficient selector for your platform,
Dialogue: 0,0:09:14.16,0:09:16.62,Default,,0,0,0,,so we'll make one of those and.
Dialogue: 0,0:09:18.12,0:09:21.00,Default,,0,0,0,,Before we try to send anything on the socket.
Dialogue: 0,0:09:22.17,0:09:24.84,Default,,0,0,0,,We're going to wait for it to be readable.
Dialogue: 0,0:09:24.84,0:09:28.38,Default,,0,0,0,,We're going to wait for it to be ready for something to be sent,
Dialogue: 0,0:09:28.38,0:09:30.30,Default,,0,0,0,,so to do that,
Dialogue: 0,0:09:30.30,0:09:34.23,Default,,0,0,0,,we register the sockets file number,
Dialogue: 0,0:09:34.23,0:09:36.81,Default,,0,0,0,,which is just an integer.
Dialogue: 0,0:09:36.81,0:09:38.82,Default,,0,0,0,,it's just a file descriptor.
Dialogue: 0,0:09:38.82,0:09:44.70,Default,,0,0,0,,And we're going to tell the selector that this is a file number that we're interested in events on
Dialogue: 0,0:09:44.80,0:09:52.72,Default,,0,0,0,,and the specific event that we're interested in is we want to know when the socket is writable
Dialogue: 0,0:09:52.72,0:09:57.04,Default,,0,0,0,,and pycharm can auto import that constant for us.
Dialogue: 0,0:09:59.34,0:10:00.80,Default,,0,0,0,,The next thing we do
Dialogue: 0,0:10:00.88,0:10:06.48,Default,,0,0,0,,so all we have done so far said I'm interested in this event on this file descriptor.
Dialogue: 0,0:10:06.48,0:10:13.08,Default,,0,0,0,,And then if we call select that will wait for some event that we've asked about to happen.
Dialogue: 0,0:10:14.13,0:10:15.12,Default,,0,0,0,,So,
Dialogue: 0,0:10:15.12,0:10:16.62,Default,,0,0,0,,once that happens,
Dialogue: 0,0:10:16.62,0:10:20.16,Default,,0,0,0,,we can unregistered the file number.
Dialogue: 0,0:10:21.51,0:10:22.83,Default,,0,0,0,,And by this point.
Dialogue: 0,0:10:24.99,0:10:25.86,Default,,0,0,0,,s is writable.
Dialogue: 0,0:10:27.93,0:10:31.56,Default,,0,0,0,,So that means that we can legally now call send on it.
Dialogue: 0,0:10:31.56,0:10:33.00,Default,,0,0,0,,So if I call this now.
Dialogue: 0,0:10:35.07,0:10:38.04,Default,,0,0,0,,You'll see that I get past this line,
Dialogue: 0,0:10:38.04,0:10:45.09,Default,,0,0,0,,but now we're throwing an exception down here because the socket is writable,
Dialogue: 0,0:10:45.09,0:10:52.17,Default,,0,0,0,,but it hasn't become readable yet We haven't waited for the server to start sending its response.
Dialogue: 0,0:10:53.49,0:10:55.14,Default,,0,0,0,,So in order to wait for that,
Dialogue: 0,0:10:55.14,0:10:59.55,Default,,0,0,0,,we have to do the same dance again,
Dialogue: 0,0:10:59.55,0:11:04.32,Default,,0,0,0,,and this time we're not interested in write ability we're interested in readability.
Dialogue: 0,0:11:04.32,0:11:08.58,Default,,0,0,0,,So we have the pycharm auto inputs that
Dialogue: 0,0:11:10.17,0:11:12.03,Default,,0,0,0,,We wait for it again,
Dialogue: 0,0:11:12.03,0:11:15.96,Default,,0,0,0,,and once this call completes,
Dialogue: 0,0:11:15.96,0:11:20.37,Default,,0,0,0,,then we'll unregistered the file number,
Dialogue: 0,0:11:20.37,0:11:22.42,Default,,0,0,0,,and now we're allowed to receive
Dialogue: 0,0:11:22.50,0:11:25.17,Default,,0,0,0,,so if I run this code now it completes,
Dialogue: 0,0:11:25.17,0:11:29.64,Default,,0,0,0,,but we haven't really won anything right still took two seconds.
Dialogue: 0,0:11:29.64,0:11:33.06,Default,,0,0,0,,We just kind of made a small mess in our code.
Dialogue: 0,0:11:33.06,0:11:37.59,Default,,0,0,0,,But we haven't gained any efficiency improvements yet.
Dialogue: 0,0:11:43.20,0:11:44.64,Default,,0,0,0,,So what's the next step?
Dialogue: 0,0:11:46.41,0:11:51.99,Default,,0,0,0,,The next step after we've started to use non blocking sockets,
Dialogue: 0,0:11:51.99,0:11:53.49,Default,,0,0,0,,is callbacks.
Dialogue: 0,0:11:55.08,0:11:56.52,Default,,0,0,0,,So I'll explain how that works.
Dialogue: 0,0:11:57.60,0:12:07.41,Default,,0,0,0,,Callbacks are a way of allowing multiple operations to be waiting concurrently for i/o operations.
Dialogue: 0,0:12:11.76,0:12:13.35,Default,,0,0,0,,To begin with, this get.
Dialogue: 0,0:12:14.37,0:12:16.53,Default,,0,0,0,,When it starts connecting,
Dialogue: 0,0:12:16.53,0:12:23.61,Default,,0,0,0,,it needs to register callback to be executed once the socket is writable,
Dialogue: 0,0:12:23.61,0:12:24.92,Default,,0,0,0,,and then it needs to return
Dialogue: 0,0:12:24.98,0:12:33.93,Default,,0,0,0,,so that work can begin on getting the other URL while we're waiting to connect this socket right,
Dialogue: 0,0:12:33.93,0:12:38.46,Default,,0,0,0,,we need some sort of concurrency in order to get past this two seconds.
Dialogue: 0,0:12:39.87,0:12:41.19,Default,,0,0,0,,So let's see how that would work.
Dialogue: 0,0:12:42.51,0:12:46.26,Default,,0,0,0,,We can begin by writing the body of that call back,
Dialogue: 0,0:12:46.26,0:12:47.82,Default,,0,0,0,,so I'm gonna call it connected.
Dialogue: 0,0:12:47.82,0:12:49.08,Default,,0,0,0,,This is going to execute.
Dialogue: 0,0:12:50.19,0:12:54.81,Default,,0,0,0,,Once the socket is connected and it's going to do the next step.
Dialogue: 0,0:12:55.98,0:12:58.41,Default,,0,0,0,,But the problem is,
Dialogue: 0,0:12:58.41,0:13:01.41,Default,,0,0,0,,you can see that right now PyCharm is sort of losing its mind
Dialogue: 0,0:13:01.41,0:13:10.95,Default,,0,0,0,,because there's two variables that are not bound in this new function because we created them up here in get.
Dialogue: 0,0:13:12.33,0:13:17.40,Default,,0,0,0,,And the two variables are s and request.
Dialogue: 0,0:13:17.40,0:13:21.36,Default,,0,0,0,,So let's say that those are passed into connected somehow.
Dialogue: 0,0:13:23.34,0:13:27.24,Default,,0,0,0,,And that somehow is going to be.
Dialogue: 0,0:13:27.24,0:13:33.33,Default,,0,0,0,,We're going to use a lambda to create a closure to capture those two values.
Dialogue: 0,0:13:33.33,0:13:35.16,Default,,0,0,0,,so we'll create a Lambda.
Dialogue: 0,0:13:36.30,0:13:43.44,Default,,0,0,0,,And we'll say that calling the Lambda executes connected with the socket and the request,
Dialogue: 0,0:13:43.44,0:13:46.44,Default,,0,0,0,,and we'll call this lambda callback.
Dialogue: 0,0:13:48.21,0:13:50.52,Default,,0,0,0,,Now what do we do with this callback?
Dialogue: 0,0:13:50.52,0:13:54.06,Default,,0,0,0,,Well selector.register,
Dialogue: 0,0:13:54.06,0:14:00.87,Default,,0,0,0,,it has this special hidden argument sort of a b-side,
Dialogue: 0,0:14:00.87,0:14:03.21,Default,,0,0,0,,and it's called data,
Dialogue: 0,0:14:03.21,0:14:06.36,Default,,0,0,0,,so we're going to pass the callback again as data.
Dialogue: 0,0:14:06.40,0:14:08.16,Default,,0,0,0,,because this is Python,
Dialogue: 0,0:14:09.75,0:14:15.12,Default,,0,0,0,,The data can be anything so we're going to pass in our lambda as the data.
Dialogue: 0,0:14:17.37,0:14:17.94,Default,,0,0,0,,And?
Dialogue: 0,0:14:19.95,0:14:24.51,Default,,0,0,0,,We're going to wait until connected is called to actually unregistered that file number.
Dialogue: 0,0:14:24.51,0:14:25.47,Default,,0,0,0,,Now,
Dialogue: 0,0:14:25.47,0:14:26.97,Default,,0,0,0,,if we do this.
Dialogue: 0,0:14:30.45,0:14:32.13,Default,,0,0,0,,Unfortunately,
Dialogue: 0,0:14:32.13,0:14:33.72,Default,,0,0,0,,we don't actually get any work done.
Dialogue: 0,0:14:34.86,0:14:36.84,Default,,0,0,0,,Because our callback is never actually executed.
Dialogue: 0,0:14:37.83,0:14:48.93,Default,,0,0,0,,So how do we make sure that this callback is actually run, once the event that it's waiting for has been executed?
Dialogue: 0,0:14:48.93,0:14:53.25,Default,,0,0,0,,Well for that we need the third part of our async framework.
Dialogue: 0,0:14:53.25,0:14:54.57,Default,,0,0,0,,We need an event loop.
Dialogue: 0,0:14:56.55,0:14:58.17,Default,,0,0,0,,so I'm going to code that down here.
Dialogue: 0,0:15:00.45,0:15:05.13,Default,,0,0,0,,get is going to run first and it's going to start a socket connecting,
Dialogue: 0,0:15:05.13,0:15:10.23,Default,,0,0,0,,and then it's going to register a callback to be executed when the socket is writable.
Dialogue: 0,0:15:10.23,0:15:14.16,Default,,0,0,0,,and once foo has done that it returns and bar does the same thing.
Dialogue: 0,0:15:14.16,0:15:19.74,Default,,0,0,0,,So now we've got to two non blocking sockets that are open and in the midst of connected,
Dialogue: 0,0:15:19.74,0:15:24.45,Default,,0,0,0,,and they've both been registered with the selector.
Dialogue: 0,0:15:24.45,0:15:29.55,Default,,0,0,0,,So I'm going to run a *dirt simple little event loop here,
Dialogue: 0,0:15:29.55,0:15:33.78,Default,,0,0,0,,and it's going to say selector dot select.
Dialogue: 0,0:15:35.13,0:15:41.49,Default,,0,0,0,,Now let's run this through the deBugger here and see what select actually returns.
Dialogue: 0,0:15:41.49,0:15:44.61,Default,,0,0,0,,So I set a break point,
Dialogue: 0,0:15:44.61,0:15:47.82,Default,,0,0,0,,and now we've got this events list,
Dialogue: 0,0:15:47.82,0:15:49.98,Default,,0,0,0,,and if I inspect that,
Dialogue: 0,0:15:49.98,0:15:51.96,Default,,0,0,0,,you'll see that it's a list.
Dialogue: 0,0:15:51.96,0:15:53.58,Default,,0,0,0,,It's got two elements,
Dialogue: 0,0:15:53.58,0:15:56.64,Default,,0,0,0,,and let's see what that first element is.
Dialogue: 0,0:15:56.64,0:15:58.26,Default,,0,0,0,,It's got.
Dialogue: 0,0:15:58.26,0:16:00.45,Default,,0,0,0,,It's a tuple with two values.
Dialogue: 0,0:16:00.45,0:16:02.13,Default,,0,0,0,,A second value isn't very interesting.
Dialogue: 0,0:16:02.13,0:16:06.99,Default,,0,0,0,,This is just the *mask that we passed in at first,
Dialogue: 0,0:16:06.99,0:16:11.04,Default,,0,0,0,,and it's equal to the EVENT_WRITE value.
Dialogue: 0,0:16:11.04,0:16:15.84,Default,,0,0,0,,but we already knew that because that was the only event that we were interested in.
Dialogue: 0,0:16:15.84,0:16:18.96,Default,,0,0,0,,It's this first element of the tuple.
Dialogue: 0,0:16:18.96,0:16:22.53,Default,,0,0,0,,This SelectorKey thing that's really interesting,
Dialogue: 0,0:16:22.53,0:16:28.92,Default,,0,0,0,,and you'll see that the data value that I passed in when I called register.
Dialogue: 0,0:16:28.92,0:16:37.08,Default,,0,0,0,,We're getting that back out in this events list and its contents is that lambda that I registered as the callback
Dialogue: 0,0:16:37.10,0:16:41.55,Default,,0,0,0,,So let's execute it.
Dialogue: 0,0:16:43.44,0:16:44.91,Default,,0,0,0,,So for event.
Dialogue: 0,0:16:46.14,0:16:48.00,Default,,0,0,0,,\NAnd mask events.
Dialogue: 0,0:16:49.38,0:16:50.94,Default,,0,0,0,,Mask is the thing we don't care about.
Dialogue: 0,0:16:50.94,0:16:51.75,Default,,0,0,0,,its too.
Dialogue: 0,0:16:51.75,0:16:53.97,Default,,0,0,0,,It's equal to EVENT_WRITE
Dialogue: 0,0:16:53.97,0:16:55.89,Default,,0,0,0,,but this event here.
Dialogue: 0,0:16:59.61,0:17:04.82,Default,,0,0,0,,Its data field is the callback that we originally registered
Dialogue: 0,0:17:04.84,0:17:06.39,Default,,0,0,0,,so I'm going to call that cb,
Dialogue: 0,0:17:06.39,0:17:08.04,Default,,0,0,0,,and then I'm just going to call it.
Dialogue: 0,0:17:09.60,0:17:14.76,Default,,0,0,0,,So if I run this now instead of breakpoint here and see what happens so it can step in.
Dialogue: 0,0:17:15.69,0:17:18.36,Default,,0,0,0,,And you'll see that we step into this lambda here.
Dialogue: 0,0:17:18.36,0:17:26.91,Default,,0,0,0,,And the lambda calls connected and connected is executed with the socket and the request,
Dialogue: 0,0:17:26.91,0:17:27.87,Default,,0,0,0,,which is get foo
Dialogue: 0,0:17:29.46,0:17:30.99,Default,,0,0,0,,So we run this.
Dialogue: 0,0:17:33.30,0:17:38.70,Default,,0,0,0,,We'll see that we need to do the same transformation down here for s.recv.
Dialogue: 0,0:17:40.65,0:17:41.70,Default,,0,0,0,,So let's do that.
Dialogue: 0,0:17:44.04,0:17:45.27,Default,,0,0,0,,And we can say.
Dialogue: 0,0:17:48.75,0:17:49.71,Default,,0,0,0,,The callback.
Dialogue: 0,0:17:51.12,0:17:52.44,Default,,0,0,0,,For when the socket is readable,
Dialogue: 0,0:17:52.44,0:17:54.18,Default,,0,0,0,,we're going to call it readable
Dialogue: 0,0:17:54.34,0:18:07.02,Default,,0,0,0,,and the same way that connected needed to take the variables that had been available in the previous callback as arguments so does readable
Dialogue: 0,0:18:07.36,0:18:09.33,Default,,0,0,0,,in this case still needs the socket.
Dialogue: 0,0:18:09.33,0:18:11.34,Default,,0,0,0,,It doesn't need request we're done with that,
Dialogue: 0,0:18:11.34,0:18:13.35,Default,,0,0,0,,but it does need the list of chunks.
Dialogue: 0,0:18:14.79,0:18:19.05,Default,,0,0,0,,So it's going to take those two as arguments,
Dialogue: 0,0:18:19.05,0:18:21.93,Default,,0,0,0,,and when it's executed,
Dialogue: 0,0:18:21.93,0:18:25.50,Default,,0,0,0,,it knows that s is readable by this time.
Dialogue: 0,0:18:26.58,0:18:31.71,Default,,0,0,0,,So we can unregister its file descriptor and receive a truck.
Dialogue: 0,0:18:31.71,0:18:33.15,Default,,0,0,0,,And we know that a chunk.
Dialogue: 0,0:18:34.11,0:18:34.74,Default,,0,0,0,,Well,
Dialogue: 0,0:18:34.74,0:18:39.72,Default,,0,0,0,,we know that this won't raise an exception because the select call.
Dialogue: 0,0:18:40.71,0:18:45.87,Default,,0,0,0,,Down here said that whatever we're waiting for on this socket is ready.
Dialogue: 0,0:18:46.80,0:18:53.25,Default,,0,0,0,,So we won't throw a resource unavailable or whatever that exception was.
Dialogue: 0,0:18:54.33,0:18:58.71,Default,,0,0,0,,The chunk will either contain something or if the server has closed,
Dialogue: 0,0:18:58.71,0:19:00.42,Default,,0,0,0,,the connection then chunk is empty.
Dialogue: 0,0:19:00.42,0:19:01.41,Default,,0,0,0,,And we know that we're done.
Dialogue: 0,0:19:03.84,0:19:06.15,Default,,0,0,0,,So up here,
Dialogue: 0,0:19:06.15,0:19:08.22,Default,,0,0,0,,that means that we don't call select,
Dialogue: 0,0:19:08.22,0:19:12.30,Default,,0,0,0,,because that's the eventloop's job,
Dialogue: 0,0:19:12.30,0:19:15.15,Default,,0,0,0,,but we do need to create the callback.
Dialogue: 0,0:19:16.02,0:19:20.53,Default,,0,0,0,,So it's going to be very similar to the callback that we created before
Dialogue: 0,0:19:20.53,0:19:24.24,Default,,0,0,0,,it's going to be a closure expressed by lambda,
Dialogue: 0,0:19:24.24,0:19:25.65,Default,,0,0,0,,and when we execute it.
Dialogue: 0,0:19:27.03,0:19:29.73,Default,,0,0,0,,We're going to pass it the socket and the chunks,
Dialogue: 0,0:19:29.73,0:19:31.89,Default,,0,0,0,,and this is no longer a loop.
Dialogue: 0,0:19:31.89,0:19:32.94,Default,,0,0,0,,We just register.
Dialogue: 0,0:19:35.97,0:19:37.89,Default,,0,0,0,,The callback once and then we're done.
Dialogue: 0,0:19:40.05,0:19:41.34,Default,,0,0,0,,And that means that,
Dialogue: 0,0:19:41.34,0:19:43.96,Default,,0,0,0,,since we no longer have a while true loop
Dialogue: 0,0:19:44.18,0:19:47.64,Default,,0,0,0,,that down here, if we have a chunk,
Dialogue: 0,0:19:47.64,0:19:51.60,Default,,0,0,0,,we need to wait for the remaining chunks,
Dialogue: 0,0:19:51.60,0:19:52.95,Default,,0,0,0,,so we can't just leave here.
Dialogue: 0,0:19:52.95,0:19:53.73,Default,,0,0,0,,We need to go.
Dialogue: 0,0:19:55.80,0:19:59.19,Default,,0,0,0,,Callback equals yet another closure,
Dialogue: 0,0:19:59.19,0:20:06.98,Default,,0,0,0,,and that's going to cause a second call or Nth call to this readable function again
Dialogue: 0,0:20:07.12,0:20:13.58,Default,,0,0,0,,and we'll register that again with a selector to re-register the socket that we unregistered up here
Dialogue: 0,0:20:13.58,0:20:16.59,Default,,0,0,0,,and then this return calls no longer necessary.
Dialogue: 0,0:20:18.12,0:20:19.44,Default,,0,0,0,,So if we run this.
Dialogue: 0,0:20:21.15,0:20:22.02,Default,,0,0,0,,We'll see that.
Dialogue: 0,0:20:23.70,0:20:26.22,Default,,0,0,0,,Both of our requests now complete.
Dialogue: 0,0:20:26.22,0:20:27.54,Default,,0,0,0,,So that's fantastic,
Dialogue: 0,0:20:27.54,0:20:29.07,Default,,0,0,0,,but unfortunately.
Dialogue: 0,0:20:30.12,0:20:36.87,Default,,0,0,0,,We don't see her final output because we're in this while true loop,
Dialogue: 0,0:20:36.87,0:20:42.06,Default,,0,0,0,,so were blocked here on this selector because there's nothing left to do,
Dialogue: 0,0:20:42.06,0:20:44.43,Default,,0,0,0,,but we haven't told the loop to complete,
Dialogue: 0,0:20:44.43,0:20:46.44,Default,,0,0,0,,and if we hit stop here,
Dialogue: 0,0:20:46.44,0:20:47.16,Default,,0,0,0,,we'll see that.
Dialogue: 0,0:20:49.02,0:20:50.91,Default,,0,0,0,,This line is, in fact,where we're stuck.
Dialogue: 0,0:20:53.04,0:21:02.28,Default,,0,0,0,,So I think that the right way to complete this loop now is to somehow figure out when all work is complete and then exit the loop.
Dialogue: 0,0:21:02.28,0:21:06.54,Default,,0,0,0,,So I'm going to say that there is some number of tasks.
Dialogue: 0,0:21:07.47,0:21:10.50,Default,,0,0,0,,*That are always in flight.
Dialogue: 0,0:21:12.54,0:21:13.89,Default,,0,0,0,,To begin with,
Dialogue: 0,0:21:13.89,0:21:14.85,Default,,0,0,0,,there are none.
Dialogue: 0,0:21:16.14,0:21:17.97,Default,,0,0,0,,And whenever we call get.
Dialogue: 0,0:21:24.45,0:21:29.97,Default,,0,0,0,,It'll Increment the number of tasks.
Dialogue: 0,0:21:30.99,0:21:37.77,Default,,0,0,0,,And when we have finished reading a response from a server.
Dialogue: 0,0:21:40.29,0:21:45.15,Default,,0,0,0,,Then it's time to decrement it.
Dialogue: 0,0:21:47.25,0:21:52.22,Default,,0,0,0,,So when we call get foo that increments the tasks to one
Dialogue: 0,0:21:52.24,0:21:56.01,Default,,0,0,0,,and when we call get bar, that increments it too,
Dialogue: 0,0:21:56.01,0:21:56.55,Default,,0,0,0,,and then,
Dialogue: 0,0:21:56.55,0:22:00.42,Default,,0,0,0,,as each of the chains of callbacks runs to completion,
Dialogue: 0,0:22:00.42,0:22:02.01,Default,,0,0,0,,it decrements n_tasks.
Dialogue: 0,0:22:02.01,0:22:08.91,Default,,0,0,0,,until this event loop sees that n tasks is zero and quits
Dialogue: 0,0:22:10.50,0:22:12.15,Default,,0,0,0,,If we run this,
Dialogue: 0,0:22:12.15,0:22:22.08,Default,,0,0,0,,then we'll see that both of the requests complete and miraculously it's only taken one second, not two.
Dialogue: 0,0:22:22.08,0:22:24.30,Default,,0,0,0,,and we can do.
Dialogue: 0,0:22:26.04,0:22:26.40,Default,,0,0,0,,Oops.
Dialogue: 0,0:22:29.58,0:22:35.94,Default,,0,0,0,,Many more of these concurrent requests and it will still only take one second.
Dialogue: 0,0:22:36.87,0:22:40.68,Default,,0,0,0,,And the reason for that is that the server is so slow
Dialogue: 0,0:22:40.74,0:22:48.36,Default,,0,0,0,,that this client is not spending significant CPU processing each of the responses
Dialogue: 0,0:22:48.56,0:22:53.07,Default,,0,0,0,,compared to how long its spending waiting for the next chunk from the server.
Dialogue: 0,0:22:53.07,0:22:57.92,Default,,0,0,0,,The server takes a full second to return just a few hundred bytes of data
Dialogue: 0,0:22:58.38,0:23:03.54,Default,,0,0,0,,and all the client is doing is appending those chunks to a list.
Dialogue: 0,0:23:03.54,0:23:07.36,Default,,0,0,0,,So the client is spending almost no CPU
Dialogue: 0,0:23:07.44,0:23:13.44,Default,,0,0,0,,with spending overwhelmingly the majority of its time waiting for i/o.
Dialogue: 0,0:23:13.89,0:23:18.66,Default,,0,0,0,,So,this is the sort of thing that async is optimized for.
Dialogue: 0,0:23:18.66,0:23:26.50,Default,,0,0,0,,We can do probably dozens or even hundreds of simultaneous requests with a simple framework like this one.
Dialogue: 0,0:23:26.78,0:23:33.75,Default,,0,0,0,,and not lose significant amounts of time on computation,
Dialogue: 0,0:23:33.75,0:23:39.66,Default,,0,0,0,,and it's very efficient because it doesn't have to hold open idle threads In order to do that.
Dialogue: 0,0:23:41.76,0:23:43.14,Default,,0,0,0,,So that's great.
Dialogue: 0,0:23:43.14,0:23:44.19,Default,,0,0,0,,It's very efficient,
Dialogue: 0,0:23:44.19,0:23:52.23,Default,,0,0,0,,but you'll also see that it's kind of a mess compared to a very simple initial implementation of Get,
Dialogue: 0,0:23:52.23,0:23:55.53,Default,,0,0,0,,we've now created a whole bunch of mess.
Dialogue: 0,0:23:55.53,0:23:57.48,Default,,0,0,0,,We now need three functions where
Dialogue: 0,0:23:57.48,0:23:58.83,Default,,0,0,0,,before we only had one.
Dialogue: 0,0:24:00.03,0:24:01.44,Default,,0,0,0,,These three functions.
Dialogue: 0,0:24:02.76,0:24:07.74,Default,,0,0,0,,What's particularly about about them is that each time a function exits,
Dialogue: 0,0:24:07.74,0:24:17.10,Default,,0,0,0,,it loses all of its local variables *right so s and request and chunks
Dialogue: 0,0:24:17.50,0:24:26.28,Default,,0,0,0,,each time one of these callbacks completes and registers the next callback in the chain to be executed.
Dialogue: 0,0:24:26.28,0:24:34.08,Default,,0,0,0,,It has to manually copy its state into a closure so that that state is available to the next call back in the chain.
Dialogue: 0,0:24:35.28,0:24:44.46,Default,,0,0,0,,The normal facilities that the language provides to us in a stack and in local variables,
Dialogue: 0,0:24:44.46,0:24:48.69,Default,,0,0,0,,we have to manually recreate that stuff in our async framework.
Dialogue: 0,0:24:48.69,0:24:56.85,Default,,0,0,0,,The language is basically no help to us here in terms of maintaining state across IO operations.
Dialogue: 0,0:24:58.41,0:25:01.68,Default,,0,0,0,,So the solution to this is the next phase.
Dialogue: 0,0:25:01.68,0:25:03.27,Default,,0,0,0,,It's coroutines.
Dialogue: 0,0:25:04.44,0:25:08.82,Default,,0,0,0,,And coroutines are built on Future.
Dialogue: 0,0:25:10.41,0:25:15.03,Default,,0,0,0,,Which is a class that we'll see in a second on python generators.
Dialogue: 0,0:25:16.71,0:25:20.07,Default,,0,0,0,,And on another class that we'll see in a moment called Task.
Dialogue: 0,0:25:21.24,0:25:24.57,Default,,0,0,0,,Now there are a bunch of kinds of things called coroutines.
Dialogue: 0,0:25:24.57,0:25:26.67,Default,,0,0,0,,coroutines are very old idea.
Dialogue: 0,0:25:26.67,0:25:31.54,Default,,0,0,0,,There are many kinds of implementations of coroutines in many languages
Dialogue: 0,0:25:32.81,0:25:36.12,Default,,0,0,0,,in Python3 asyncio
Dialogue: 0,0:25:36.12,0:25:38.10,Default,,0,0,0,,what we mean when we say coroutines is,
Dialogue: 0,0:25:39.90,0:25:43.68,Default,,0,0,0,,Generator based coroutines.
Dialogue: 0,0:25:45.84,0:25:49.35,Default,,0,0,0,,Greenlet are also called coroutines in Python3.5.
Dialogue: 0,0:25:49.35,0:25:56.85,Default,,0,0,0,,There are now new things called native coroutines that can take advantage of the new async and await keywords.
Dialogue: 0,0:25:56.85,0:26:00.48,Default,,0,0,0,,They're essentially syntactic sugar on top of generators.
Dialogue: 0,0:26:00.48,0:26:04.20,Default,,0,0,0,,So if you understand the discussion they were going to have right now,
Dialogue: 0,0:26:04.20,0:26:09.63,Default,,0,0,0,,you'll understand how the Python3.5 native coroutines work as well,
Dialogue: 0,0:26:09.63,0:26:13.53,Default,,0,0,0,,although they're built into the interpreter rather than built out of generators,
Dialogue: 0,0:26:13.53,0:26:14.55,Default,,0,0,0,,the way we're going to do right now.
Dialogue: 0,0:26:16.83,0:26:17.25,Default,,0,0,0,,So.
Dialogue: 0,0:26:18.72,0:26:21.93,Default,,0,0,0,,The first thing that we need is a future class.
Dialogue: 0,0:26:22.83,0:26:25.59,Default,,0,0,0,,And you'll see why in a little bit this is useful
Dialogue: 0,0:26:25.59,0:26:29.76,Default,,0,0,0,,but for the moment I'm just going to present it,
Dialogue: 0,0:26:29.76,0:26:34.35,Default,,0,0,0,,and you'll just have to trust me that this is going to be a useful thing,
Dialogue: 0,0:26:34.35,0:26:41.16,Default,,0,0,0,,so a future represents some pending event that we're were waiting for.
Dialogue: 0,0:26:42.24,0:26:48.90,Default,,0,0,0,,It has a list of callbacks that will be executed when that event occurs,
Dialogue: 0,0:26:48.90,0:26:53.88,Default,,0,0,0,,and when that event occurs, somebody's going to call resolve and the future will.
Dialogue: 0,0:26:57.96,0:27:02.16,Default,,0,0,0,,Execute all of the callbacks that were waiting for that event.
Dialogue: 0,0:27:02.16,0:27:03.48,Default,,0,0,0,,So that's our future class.
Dialogue: 0,0:27:04.65,0:27:12.36,Default,,0,0,0,,And we're going to do this simple transformation where instead of register and callbacks directly with the selector,
Dialogue: 0,0:27:12.36,0:27:14.10,Default,,0,0,0,,we're going to register futures instead.
Dialogue: 0,0:27:24.63,0:27:29.19,Default,,0,0,0,,So we add the callback to the list of callbacks.
Dialogue: 0,0:27:29.19,0:27:33.33,Default,,0,0,0,,waiting for this future to be resolved and instead of registering the callback directly.
Dialogue: 0,0:27:34.29,0:27:35.79,Default,,0,0,0,,We register the future instead.
Dialogue: 0,0:27:37.56,0:27:42.21,Default,,0,0,0,,And I have to do the same thing here.
Dialogue: 0,0:27:45.48,0:27:46.50,Default,,0,0,0,,And finally,
Dialogue: 0,0:27:46.50,0:27:51.03,Default,,0,0,0,,we have to do that same laborious transformation.
Dialogue: 0,0:27:54.69,0:27:57.06,Default,,0,0,0,,in the three places where we had registered callbacks,
Dialogue: 0,0:27:57.06,0:28:00.72,Default,,0,0,0,,we're now adding callbacks to futures and registering the future instead.
Dialogue: 0,0:28:02.01,0:28:05.28,Default,,0,0,0,,And that means that down here in our event loop.
Dialogue: 0,0:28:06.54,0:28:11.52,Default,,0,0,0,,The event that data is no longer a callback its future,
Dialogue: 0,0:28:11.52,0:28:12.99,Default,,0,0,0,,and so we don't call it directly.
Dialogue: 0,0:28:12.99,0:28:15.33,Default,,0,0,0,,Instead,we say future.resolve.
Dialogue: 0,0:28:16.62,0:28:19.14,Default,,0,0,0,,So, you can expect,
Dialogue: 0,0:28:19.14,0:28:22.62,Default,,0,0,0,,with such a simple transformation that had probably got it right,
Dialogue: 0,0:28:22.62,0:28:26.13,Default,,0,0,0,,and it looks like I did so.
Dialogue: 0,0:28:26.13,0:28:31.44,Default,,0,0,0,,All we've done so far is made our code even worse,  even more messy and long,
Dialogue: 0,0:28:31.44,0:28:35.34,Default,,0,0,0,,and we have simply got the same performance that we had before.
Dialogue: 0,0:28:36.57,0:28:44.64,Default,,0,0,0,,So the next step is going to be to somehow use these futures with generators to start to implement coroutines.
Dialogue: 0,0:28:46.98,0:28:51.98,Default,,0,0,0,,So I'm going to do a quick little refresher about Generators.
Dialogue: 0,0:28:52.10,0:28:55.62,Default,,0,0,0,,cause there's a few confusing things about them.
Dialogue: 0,0:28:55.62,0:28:59.07,Default,,0,0,0,,Even for veteran python programs.
Dialogue: 0,0:29:00.51,0:29:05.32,Default,,0,0,0,,So a generator is created with a generator function
Dialogue: 0,0:29:05.56,0:29:12.87,Default,,0,0,0,,and a generator function is any function that contains the yield statement.
Dialogue: 0,0:29:13.98,0:29:16.89,Default,,0,0,0,,So this generator function is going to print start yield one.
Dialogue: 0,0:29:18.66,0:29:19.20,Default,,0,0,0,,Middle.
Dialogue: 0,0:29:20.58,0:29:21.06,Default,,0,0,0,,Two.
Dialogue: 0,0:29:23.37,0:29:24.06,Default,,0,0,0,,And then it's done.
Dialogue: 0,0:29:25.92,0:29:31.53,Default,,0,0,0,,And the funny thing about a generator function is that when you execute it,
Dialogue: 0,0:29:31.53,0:29:32.94,Default,,0,0,0,,it doesn't actually run its code.
Dialogue: 0,0:29:33.99,0:29:36.12,Default,,0,0,0,,It didn't print start middle or done
Dialogue: 0,0:29:36.32,0:29:40.72,Default,,0,0,0,,Instead,it created a generator object
Dialogue: 0,0:29:41.20,0:29:50.52,Default,,0,0,0,,and this generator object contains a code object *that's the byte code that represents this stuff.
Dialogue: 0,0:29:51.45,0:29:52.08,Default,,0,0,0,,And?
Dialogue: 0,0:29:53.13,0:29:59.48,Default,,0,0,0,,It's got forty four bytes
Dialogue: 0,0:29:59.48,0:30:02.82,Default,,0,0,0,,and the generator also has a stack frame.
Dialogue: 0,0:30:03.93,0:30:05.61,Default,,0,0,0,,And that's got an instruction pointer,
Dialogue: 0,0:30:05.61,0:30:07.89,Default,,0,0,0,,and it begins his negative one,
Dialogue: 0,0:30:07.89,0:30:11.70,Default,,0,0,0,,meaning that it hasn't executed any instructions yet.
Dialogue: 0,0:30:12.69,0:30:16.53,Default,,0,0,0,,And that's why we didn't actually see any of these prints statements is being executed.
Dialogue: 0,0:30:17.85,0:30:22.47,Default,,0,0,0,,So the way to run a generator is to call him next on it.
Dialogue: 0,0:30:23.73,0:30:25.32,Default,,0,0,0,,And if you do that,
Dialogue: 0,0:30:25.32,0:30:30.72,Default,,0,0,0,,then you'll see that it executes its first few bites of byte code,
Dialogue: 0,0:30:30.72,0:30:32.52,Default,,0,0,0,,so it prints start
Dialogue: 0,0:30:32.68,0:30:36.78,Default,,0,0,0,,and one is actually the return value of the next statement
Dialogue: 0,0:30:36.92,0:30:42.36,Default,,0,0,0,,because the return value of next is whichever yield is next executed.
Dialogue: 0,0:30:43.35,0:30:50.34,Default,,0,0,0,,And the instruction pointer is now paused at thirteen bites into the forty four bytes of bytecode.
Dialogue: 0,0:30:51.51,0:30:54.22,Default,,0,0,0,,So if we call next again
Dialogue: 0,0:30:54.22,0:31:00.96,Default,,0,0,0,,this time,I'm going to assign its return value so that you can see that a prints middle.
Dialogue: 0,0:31:02.64,0:31:05.64,Default,,0,0,0,,But it returns two.
Dialogue: 0,0:31:06.60,0:31:11.55,Default,,0,0,0,,Which was the value passed into the next yield statement.
Dialogue: 0,0:31:12.90,0:31:17.04,Default,,0,0,0,,And now our stack pointer....
Dialogue: 0,0:31:17.04,0:31:17.40,Default,,0,0,0,,Sorry,
Dialogue: 0,0:31:17.40,0:31:20.34,Default,,0,0,0,,our instruction pointer is at twenty eight of forty four.
Dialogue: 0,0:31:21.57,0:31:24.84,Default,,0,0,0,,And if we call next one more time.
Dialogue: 0,0:31:25.83,0:31:28.95,Default,,0,0,0,,Then we'll raise stop iteration exception,
Dialogue: 0,0:31:28.95,0:31:30.15,Default,,0,0,0,,which indicates that
Dialogue: 0,0:31:31.05,0:31:38.64,Default,,0,0,0,,It's done executing and the lasti pointer has actually been deleted.
Dialogue: 0,0:31:40.38,0:31:46.74,Default,,0,0,0,,So that's how a generator works in all versions of Python going back two point five.
Dialogue: 0,0:31:49.02,0:31:52.53,Default,,0,0,0,,So how do we use that to create a coroutine?
Dialogue: 0,0:31:54.60,0:31:55.02,Default,,0,0,0,,Well,
Dialogue: 0,0:31:55.02,0:31:56.25,Default,,0,0,0,,here's the promise.
Dialogue: 0,0:31:57.81,0:31:59.67,Default,,0,0,0,,The promise is going to be that.
Dialogue: 0,0:32:00.87,0:32:02.79,Default,,0,0,0,,This get function.
Dialogue: 0,0:32:04.95,0:32:10.26,Default,,0,0,0,,Which currently has to create a closure that captures his local variables.
Dialogue: 0,0:32:12.03,0:32:13.92,Default,,0,0,0,,Names that closure callback.
Dialogue: 0,0:32:14.94,0:32:20.58,Default,,0,0,0,,adds that callback to the future and then registers that future with the selector.
Dialogue: 0,0:32:21.93,0:32:25.38,Default,,0,0,0,,This can be simplified to not require a call back at all.
Dialogue: 0,0:32:26.94,0:32:29.64,Default,,0,0,0,,So I'm going to delete the callback.
Dialogue: 0,0:32:29.64,0:32:31.71,Default,,0,0,0,,I'm going to delete the callbacks body.
Dialogue: 0,0:32:34.02,0:32:39.08,Default,,0,0,0,,But we need to pause until s is writable
Dialogue: 0,0:32:39.20,0:32:47.40,Default,,0,0,0,,somehow here before we unregistered it and then rely on the socket to be writable so that we can call send on it
Dialogue: 0,0:32:47.76,0:32:51.87,Default,,0,0,0,,and the promise is that somehow,
Dialogue: 0,0:32:51.87,0:32:53.49,Default,,0,0,0,,by yielding F,
Dialogue: 0,0:32:53.49,0:32:54.96,Default,,0,0,0,,the future that we just created.
Dialogue: 0,0:32:56.49,0:33:05.01,Default,,0,0,0,,Somehow we can pause this generator until the event that we said we were interested in has occurred.
Dialogue: 0,0:33:07.95,0:33:11.61,Default,,0,0,0,,And if we believe that this promise is true.
Dialogue: 0,0:33:12.63,0:33:20.85,Default,,0,0,0,,Then we can combine what had been two functions into a single generator function that contains a yield statement.
Dialogue: 0,0:33:22.74,0:33:28.74,Default,,0,0,0,,But the promise is not going to be fulfilled just yet because if I run this,
Dialogue: 0,0:33:28.74,0:33:30.21,Default,,0,0,0,,it's going to take zero seconds.
Dialogue: 0,0:33:30.21,0:33:31.71,Default,,0,0,0,,It has no output,
Dialogue: 0,0:33:31.71,0:33:33.03,Default,,0,0,0,,and it doesn't do any work.
Dialogue: 0,0:33:34.80,0:33:35.82,Default,,0,0,0,,So why is that?
Dialogue: 0,0:33:35.82,0:33:36.66,Default,,0,0,0,,What happened here?
Dialogue: 0,0:33:38.64,0:33:39.21,Default,,0,0,0,,Well,
Dialogue: 0,0:33:39.21,0:33:42.03,Default,,0,0,0,,recall that when you execute a generator function,
Dialogue: 0,0:33:42.03,0:33:46.50,Default,,0,0,0,,it returns a generator doesn't actually run any of its code.
Dialogue: 0,0:33:46.50,0:33:49.92,Default,,0,0,0,,So now that I've added a yield statement here to get,
Dialogue: 0,0:33:49.92,0:33:51.81,Default,,0,0,0,,that means that get here.
Dialogue: 0,0:33:54.36,0:33:55.83,Default,,0,0,0,,Just returns a generator.
Dialogue: 0,0:33:57.66,0:33:59.67,Default,,0,0,0,,doesn't actually do anything,
Dialogue: 0,0:33:59.67,0:34:00.57,Default,,0,0,0,,and the same here.
Dialogue: 0,0:34:01.80,0:34:09.09,Default,,0,0,0,,So how are we going to execute it?
Dialogue: 0,0:34:09.09,0:34:10.65,Default,,0,0,0,,How do we call next on it?
Dialogue: 0,0:34:12.66,0:34:22.14,Default,,0,0,0,,So that is the third piece of this puzzle of this coroutine based async framework is the task class.
Dialogue: 0,0:34:23.37,0:34:24.48,Default,,0,0,0,,Task class.
Dialogue: 0,0:34:26.25,0:34:31.20,Default,,0,0,0,,It's responsible for calling next on generators.
Dialogue: 0,0:34:32.34,0:34:34.98,Default,,0,0,0,,So let's see what that looks like.
Dialogue: 0,0:34:34.98,0:34:37.23,Default,,0,0,0,,And in the case of both future and task,
Dialogue: 0,0:34:37.23,0:34:45.15,Default,,0,0,0,,these are incredibly simple and oversimplified and buggy incomplete implementations of these ideas.
Dialogue: 0,0:34:45.15,0:34:48.99,Default,,0,0,0,,These ideas are fully expressed in a number of frameworks,
Dialogue: 0,0:34:48.99,0:35:00.21,Default,,0,0,0,,notably tornado and now in asyncio in the python3.4 standard library.
Dialogue: 0,0:35:01.59,0:35:08.10,Default,,0,0,0,,So my dumb version of the task class is going to look like.
Dialogue: 0,0:35:09.54,0:35:12.90,Default,,0,0,0,,We're going to initialize it with a generator.
Dialogue: 0,0:35:14.61,0:35:15.60,Default,,0,0,0,,I will save that.
Dialogue: 0,0:35:17.28,0:35:20.79,Default,,0,0,0,,And then we'll have a function called Step,
Dialogue: 0,0:35:20.79,0:35:24.36,Default,,0,0,0,,and this terminology is borrowed from a asyncio.
Dialogue: 0,0:35:24.36,0:35:28.32,Default,,0,0,0,,What step does his calls next on the generator.
Dialogue: 0,0:35:30.18,0:35:35.10,Default,,0,0,0,,it's going to yield a future.
Dialogue: 0,0:35:36.87,0:35:40.77,Default,,0,0,0,,So that's going to become the return value of next.
Dialogue: 0,0:35:40.77,0:35:43.71,Default,,0,0,0,,So let's capture that.
Dialogue: 0,0:35:46.02,0:35:46.68,Default,,0,0,0,,And then.
Dialogue: 0,0:35:48.33,0:35:51.00,Default,,0,0,0,,What do we want to happen when this future is resolved?
Dialogue: 0,0:35:51.93,0:35:56.79,Default,,0,0,0,,We need to add some kind of callback to the future,
Dialogue: 0,0:35:56.79,0:35:59.82,Default,,0,0,0,,something that we want to happen once the future is ready
Dialogue: 0,0:35:59.96,0:36:07.47,Default,,0,0,0,,and let's just pass self dot step in as the callback.
Dialogue: 0,0:36:07.47,0:36:09.90,Default,,0,0,0,,So once this future is resolved,
Dialogue: 0,0:36:09.90,0:36:13.47,Default,,0,0,0,,we'll just come right back into here and we'll call next and self.gen again.
Dialogue: 0,0:36:15.00,0:36:18.33,Default,,0,0,0,,when we call next on self.gen again,
Dialogue: 0,0:36:18.33,0:36:20.76,Default,,0,0,0,,that's going to resume here.
Dialogue: 0,0:36:24.42,0:36:28.65,Default,,0,0,0,,And therefore we know that we can unregister the sockets file number,
Dialogue: 0,0:36:28.65,0:36:30.00,Default,,0,0,0,,and that s is now writable.
Dialogue: 0,0:36:31.35,0:36:35.52,Default,,0,0,0,,So if we run this still not going to work.
Dialogue: 0,0:36:37.11,0:36:38.73,Default,,0,0,0,,The reason for that is.
Dialogue: 0,0:36:41.16,0:36:45.06,Default,,0,0,0,,That we need to make an initial call the self.step,
Dialogue: 0,0:36:45.06,0:36:54.09,Default,,0,0,0,,so that we make an initial call to self.gen so that we get the get function started,
Dialogue: 0,0:36:54.09,0:36:55.95,Default,,0,0,0,,and it will connect the socket and so on.
Dialogue: 0,0:36:55.95,0:36:58.83,Default,,0,0,0,,So let's just do that right here.
Dialogue: 0,0:36:58.83,0:36:59.64,Default,,0,0,0,,In the constructor.
Dialogue: 0,0:37:02.49,0:37:09.87,Default,,0,0,0,,And then the final step of this conversion is going to be down here,
Dialogue: 0,0:37:09.87,0:37:14.90,Default,,0,0,0,,where we need to wrap each of these calls in a task
Dialogue: 0,0:37:15.00,0:37:18.15,Default,,0,0,0,,so when get returns a generator, the task wraps it
Dialogue: 0,0:37:19.74,0:37:23.84,Default,,0,0,0,,Signs it to self.gen and calls self.step
Dialogue: 0,0:37:23.92,0:37:34.50,Default,,0,0,0,,and that will call next and that will actually begin this thing executing up until the first yield statement
Dialogue: 0,0:37:34.50,0:37:35.70,Default,,0,0,0,,So if I run this.
Dialogue: 0,0:37:38.34,0:37:39.12,Default,,0,0,0,,In a way,
Dialogue: 0,0:37:39.12,0:37:41.19,Default,,0,0,0,,you will see the way we make progress.
Dialogue: 0,0:37:42.15,0:37:45.57,Default,,0,0,0,,Because we raise a stop iteration exception here.
Dialogue: 0,0:37:47.19,0:37:49.38,Default,,0,0,0,,So that that actually that's good news,
Dialogue: 0,0:37:49.38,0:37:55.80,Default,,0,0,0,,because it means that this get generator has actually been run to completion.
Dialogue: 0,0:37:55.80,0:37:59.70,Default,,0,0,0,,It's done the work that it set out to do.
Dialogue: 0,0:37:59.70,0:38:01.41,Default,,0,0,0,,so.
Dialogue: 0,0:38:01.41,0:38:02.37,Default,,0,0,0,,if we.
Dialogue: 0,0:38:04.08,0:38:04.98,Default,,0,0,0,,Catch that.
Dialogue: 0,0:38:05.94,0:38:07.14,Default,,0,0,0,,What do we want to do here?
Dialogue: 0,0:38:07.14,0:38:07.47,Default,,0,0,0,,Well,
Dialogue: 0,0:38:07.47,0:38:08.43,Default,,0,0,0,,the task is done.
Dialogue: 0,0:38:08.43,0:38:10.11,Default,,0,0,0,,So let's just return.
Dialogue: 0,0:38:11.34,0:38:12.93,Default,,0,0,0,,And if we execute this version.
Dialogue: 0,0:38:14.37,0:38:15.54,Default,,0,0,0,,It actually completes.
Dialogue: 0,0:38:16.53,0:38:22.80,Default,,0,0,0,,So this is fantastic now we've still got a few stray callbacks.
Dialogue: 0,0:38:23.67,0:38:24.63,Default,,0,0,0,,So.
Dialogue: 0,0:38:25.62,0:38:28.98,Default,,0,0,0,,We can get rid of those the same transformation that we did here.
Dialogue: 0,0:38:30.33,0:38:32.43,Default,,0,0,0,,So we're just going to do it down here again as well,
Dialogue: 0,0:38:32.43,0:38:33.33,Default,,0,0,0,,so we're going to.
Dialogue: 0,0:38:33.33,0:38:34.95,Default,,0,0,0,,We don't need this call back any more.
Dialogue: 0,0:38:35.94,0:38:37.50,Default,,0,0,0,,You don't need to add it to the future.
Dialogue: 0,0:38:38.46,0:38:46.68,Default,,0,0,0,,We do still need to say what event we're interested in and register the future to be resolved when that event occurs,
Dialogue: 0,0:38:46.68,0:38:50.01,Default,,0,0,0,,but we can delete the callback definition.
Dialogue: 0,0:38:51.06,0:38:55.71,Default,,0,0,0,,Since we're still in the same function as we were in before,
Dialogue: 0,0:38:55.71,0:38:59.01,Default,,0,0,0,,we don't need a redundant global statement.
Dialogue: 0,0:39:00.27,0:39:06.48,Default,,0,0,0,,And if we simply yield this new future that we created,
Dialogue: 0,0:39:06.48,0:39:07.44,Default,,0,0,0,,that means that.
Dialogue: 0,0:39:08.76,0:39:09.42,Default,,0,0,0,,By now,
Dialogue: 0,0:39:09.42,0:39:13.71,Default,,0,0,0,,by the time the task resolve.. resumes us,
Dialogue: 0,0:39:13.71,0:39:14.88,Default,,0,0,0,,the socket is now readable.
Dialogue: 0,0:39:17.97,0:39:21.57,Default,,0,0,0,,And here we've got our last of the callback.
Dialogue: 0,0:39:21.57,0:39:22.80,Default,,0,0,0,,so we can delete that.
Dialogue: 0,0:39:24.00,0:39:29.46,Default,,0,0,0,,And we can yield our future instead of registering a callback.
Dialogue: 0,0:39:36.72,0:39:42.18,Default,,0,0,0,,What do we want to do once we have received the next chunk?
Dialogue: 0,0:39:42.18,0:39:42.78,Default,,0,0,0,,In other words,
Dialogue: 0,0:39:42.78,0:39:45.39,Default,,0,0,0,,once the socket is readable again?
Dialogue: 0,0:39:46.68,0:39:50.46,Default,,0,0,0,,we want to receive the next chunk right？
Dialogue: 0,0:39:50.46,0:39:54.12,Default,,0,0,0,,so what we're going to end up doing is
Dialogue: 0,0:39:54.24,0:40:05.13,Default,,0,0,0,,we're going to end up reproducing the same while true loop that we originally had in the olden days at the beginning of this talk,
Dialogue: 0,0:40:05.13,0:40:08.10,Default,,0,0,0,,when we were writing a simple blocking get.
Dialogue: 0,0:40:09.06,0:40:10.83,Default,,0,0,0,,So that's going to look something like.
Dialogue: 0,0:40:14.07,0:40:18.18,Default,,0,0,0,,We're going to put this within the loop.
Dialogue: 0,0:40:19.65,0:40:22.68,Default,,0,0,0,,And each time through the loop we say,
Dialogue: 0,0:40:22.68,0:40:25.89,Default,,0,0,0,,I want to read from the socket,
Dialogue: 0,0:40:25.89,0:40:28.14,Default,,0,0,0,,so wait for this future to be resolved.
Dialogue: 0,0:40:29.13,0:40:32.37,Default,,0,0,0,,And then unregistered the socket from the selector.
Dialogue: 0,0:40:32.37,0:40:33.12,Default,,0,0,0,,get the chunk.
Dialogue: 0,0:40:34.05,0:40:40.86,Default,,0,0,0,,And if there is any then added to the list and this stuff is now extra.
Dialogue: 0,0:40:42.69,0:40:46.11,Default,,0,0,0,,The loop will just repeat and do that stuff again up here,
Dialogue: 0,0:40:46.11,0:40:47.52,Default,,0,0,0,,and if there's no chunk.
Dialogue: 0,0:40:47.52,0:40:48.42,Default,,0,0,0,,That means that.
Dialogue: 0,0:40:50.07,0:40:51.96,Default,,0,0,0,,We're done reading the server response,
Dialogue: 0,0:40:51.96,0:40:53.64,Default,,0,0,0,,and so we can.
Dialogue: 0,0:40:55.26,0:40:56.46,Default,,0,0,0,,Join the body up,
Dialogue: 0,0:40:56.46,0:40:59.85,Default,,0,0,0,,print the first line decrement the tasks count,
Dialogue: 0,0:40:59.85,0:41:02.94,Default,,0,0,0,,and since now we're in an infinite loop again.
Dialogue: 0,0:41:02.94,0:41:05.37,Default,,0,0,0,,here we need to return as soon as we're done.
Dialogue: 0,0:41:07.74,0:41:08.16,Default,,0,0,0,,Now,
Dialogue: 0,0:41:08.16,0:41:10.29,Default,,0,0,0,,if all goes well and I run this,
Dialogue: 0,0:41:10.29,0:41:14.34,Default,,0,0,0,,then it still takes one second.
Dialogue: 0,0:41:14.34,0:41:19.44,Default,,0,0,0,,it still does all the work that it was asked to do
Dialogue: 0,0:41:19.80,0:41:26.25,Default,,0,0,0,,and we can still scale this out to a large number of tasks without any loss of performance,
Dialogue: 0,0:41:26.25,0:41:32.16,Default,,0,0,0,,because launching ten fifteen coroutines is incredibly cheap,
Dialogue: 0,0:41:32.16,0:41:36.36,Default,,0,0,0,,it's roughly as cheap as a bunch of callbacks.
Dialogue: 0,0:41:37.44,0:41:40.52,Default,,0,0,0,,So coroutines are kind of the best of both *worlds.
Dialogue: 0,0:41:40.66,0:41:44.98,Default,,0,0,0,,they're about as cheap as callbacks they're much cheaper than threads
Dialogue: 0,0:41:45.24,0:41:50.58,Default,,0,0,0,,on my system, I measured that a coroutine takes...
Dialogue: 0,0:41:51.54,0:41:57.15,Default,,0,0,0,,About six K of memory versus about thirty K of memory for a thread,
Dialogue: 0,0:41:57.15,0:42:04.74,Default,,0,0,0,,and furthermore I did a little experiment and found that I was capable of launching over a hundred thousand coroutines.
Dialogue: 0,0:42:04.74,0:42:12.03,Default,,0,0,0,,Their limited only by the amount of ram that the Python process is allowed to allocate.
Dialogue: 0,0:42:12.93,0:42:14.10,Default,,0,0,0,,versus Threads,
Dialogue: 0,0:42:14.10,0:42:18.03,Default,,0,0,0,,which are subject to other limits beside simply memory limits.
Dialogue: 0,0:42:18.03,0:42:24.63,Default,,0,0,0,,There are various user and operating system limits on the number of threads that a *process is allowed to start with.
Dialogue: 0,0:42:24.63,0:42:29.67,Default,,0,0,0,,which are difficult in various ways to work around,
Dialogue: 0,0:42:29.67,0:42:34.90,Default,,0,0,0,,and they take up space and operating system data structures and the operating system scheduler
Dialogue: 0,0:42:35.02,0:42:39.18,Default,,0,0,0,,that eventually causes their overhead to become quite significant.
Dialogue: 0,0:42:40.35,0:42:49.24,Default,,0,0,0,,All they're doing is waiting around for some sort of slow IO operations that aren't actually going to require very much CPU。
Dialogue: 0,0:42:49.30,0:42:55.02,Default,,0,0,0,,so compared to coroutines for a application like this,
Dialogue: 0,0:42:55.02,0:42:59.38,Default,,0,0,0,,that's going to spend very little time doing computation
Dialogue: 0,0:42:59.54,0:43:08.01,Default,,0,0,0,,and overwhelmingly spending its time waiting for a slow server or a slow client at the other end of the socket.
Dialogue: 0,0:43:08.01,0:43:11.58,Default,,0,0,0,,Coroutines are much more efficient for this kind of thing,
Dialogue: 0,0:43:11.58,0:43:16.29,Default,,0,0,0,,but compared to call backs their lot simpler because.
Dialogue: 0,0:43:17.46,0:43:23.25,Default,,0,0,0,,You can put all of the code for a coroutine in one function,
Dialogue: 0,0:43:23.25,0:43:29.25,Default,,0,0,0,,so you don't have to declare and register a whole chain of callbacks.
Dialogue: 0,0:43:29.25,0:43:34.17,Default,,0,0,0,,And you can just reuse your local variables the same way that  you have always done.
Dialogue: 0,0:43:36.27,0:43:47.13,Default,,0,0,0,,So that's the beginning of Tornado style or async i/o style coroutine based async framework.
Dialogue: 0,0:43:50.13,0:43:52.71,Default,,0,0,0,,So if you want to know more about this,
Dialogue: 0,0:43:52.71,0:43:57.84,Default,,0,0,0,,go to bit.ly/coroutines so I've have created a landing page for you there
Dialogue: 0,0:43:57.98,0:44:03.09,Default,,0,0,0,,that'll link you out to a version of the code that I wrote just now,
Dialogue: 0,0:44:03.09,0:44:07.74,Default,,0,0,0,,as well as link you to a chapter that I wrote with Guido van Rossum
Dialogue: 0,0:44:07.78,0:44:12.84,Default,,0,0,0,,that will appear in the next book in the architecture of Open source Application series.
Dialogue: 0,0:44:12.84,0:44:25.50,Default,,0,0,0,,and that chapter goes into far more detail about how generator based coroutines are implemented in asyncio on Python3.4 standard library,
Dialogue: 0,0:44:25.50,0:44:36.82,Default,,0,0,0,,and especially it goes into how coroutines take advantage of generator features that are specific to python3
Dialogue: 0,0:44:37.38,0:44:43.56,Default,,0,0,0,,and how a asynchronous queue class that's included in asyncio,
Dialogue: 0,0:44:43.56,0:44:52.35,Default,,0,0,0,,can be used to coordinate coroutines in a way that's very familiar to people who are used to using threads.
Dialogue: 0,0:44:53.58,0:44:55.53,Default,,0,0,0,,And as a reminder,
Dialogue: 0,0:44:55.53,0:45:00.21,Default,,0,0,0,,if you want to work with people like me at a opensource company,
Dialogue: 0,0:45:00.21,0:45:05.40,Default,,0,0,0,,that's very warm and diversity has really fulfilling and technically challenging jobs.
Dialogue: 0,0:45:05.40,0:45:07.08,Default,,0,0,0,,Mongo db is hiring.
Dialogue: 0,0:45:07.08,0:45:11.07,Default,,0,0,0,,We have offices in New York in Palo Alto and worldwide.
Dialogue: 0,0:45:11.07,0:45:14.16,Default,,0,0,0,,Go to bit.ly/mongo-jobs.
Dialogue: 0,0:45:14.16,0:45:15.09,Default,,0,0,0,,I would love to work with you.
