[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 768
PlayResY: 480

[Aegisub Project Garbage]
Audio File: Programming Like It's 1979 - 6502 Assembly language on the Apple ][.mp4
Video File: Programming Like It's 1979 - 6502 Assembly language on the Apple ][.mp4
Video AR Mode: 4
Video AR Value: 1.600000
Video Zoom Percent: 1.500000
Scroll Position: 90
Active Line: 91
Video Position: 14933

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: 字幕组样式,思源黑体 CN Medium,90,&H00FFFFB9,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,3.6,1.8,2,0,0,15,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:02.78,0:00:07.76,Default,,0,0,0,,Here we go. okay I see apple //e and we're ready to go
Dialogue: 0,0:00:08.30,0:00:13.44,Default,,0,0,0,,all right so I wanted to do a very quick video maybe ten minutes or so
Dialogue: 0,0:00:13.44,0:00:16.80,Default,,0,0,0,,talking about programming like it's 1981 
Dialogue: 0,0:00:16.94,0:00:25.48,Default,,0,0,0,,in particular, a lot of people seem to have questions about how exactly you would have programmed the Apple 2 back in the day
Dialogue: 0,0:00:25.48,0:00:29.58,Default,,0,0,0,,And I want to show you what it looked like before you had tools  
Dialogue: 0,0:00:29.80,0:00:32.56,Default,,0,0,0,,Then I'll show you some of the very basic tools 
Dialogue: 0,0:00:32.70,0:00:37.22,Default,,0,0,0,,And then I'll show you maybe if we have time what an assembler looks like
Dialogue: 0,0:00:37.44,0:00:42.46,Default,,0,0,0,,So here we've got our Apple 2e running an emulation, I'm gonna hit the reset button 
Dialogue: 0,0:00:42.70,0:00:49.30,Default,,0,0,0,,As if we have no no disc in the drive at all and here we are, we have no DOS
Dialogue: 0,0:00:49.38,0:00:58.44,Default,,0,0,0,,I can't look at anything, anything about anything all we have is the Apple soft basic interpreter which was built-in tool
Dialogue: 0,0:00:59.60,0:01:04.80,Default,,0,0,0,,so we could write a small basic program just like you'd expect to see.
Dialogue: 0,0:01:05.44,0:01:10.58,Default,,0,0,0,, The the basic program that everyone runs.
Dialogue: 0,0:01:12.10,0:01:14.49,Default,,0,0,0,,That's not very interesting 
Dialogue: 0,0:01:14.49,0:01:18.72,Default,,0,0,0,,sooner or later what everyone did on the Apple 2 of course was play games.
Dialogue: 0,0:01:18.88,0:01:23.04,Default,,0,0,0,,some of those games had bugs and when the game crashed
Dialogue: 0,0:01:23.14,0:01:26.24,Default,,0,0,0,, you would sometimes into basic if it were basic game.
Dialogue: 0,0:01:26.28,0:01:33.93,Default,,0,0,0,,but if it were written in machine language you might drop to an unfamiliar prompt and that prompt would look like an asterisk
Dialogue: 0,0:01:33.93,0:01:37.80,Default,,0,0,0,,in fact it will looked like this typically beep 
Dialogue: 0,0:01:38.06,0:01:42.50,Default,,0,0,0,,and what is this prompt?Well, we can try and get some help
Dialogue: 0,0:01:42.62,0:01:46.78,Default,,0,0,0,,we got a beep. We could type help,H
Dialogue: 0,0:01:46.84,0:01:49.76,Default,,0,0,0,,this is just like the VI editor if you're in UNIX 
Dialogue: 0,0:01:49.94,0:01:54.88,Default,,0,0,0,,what is this thing? Well,this is the Apple 2 machine language monitor.  
Dialogue: 0,0:01:55.06,0:02:06.18,Default,,0,0,0,,So monitor means that you can inspect and change things in memory so let's try typing a number ok
Dialogue: 0,0:02:06.86,0:02:10.70,Default,,0,0,0,,So that is literally the zeroeth byte in memory 
Dialogue: 0,0:02:10.80,0:02:12.14,Default,,0,0,0,,You can also do that
Dialogue: 0,0:02:12.34,0:02:15.88,Default,,0,0,0,,And we see that it contains the value 4C
Dialogue: 0,0:02:16.06,0:02:22.52,Default,,0,0,0,, we can inspect other areas of memory we can go probably up to ffff.
Dialogue: 0,0:02:22.58,0:02:27.36,Default,,0,0,0,,which would be the probably that would actually be in the ROM memory opposed to the RAM
Dialogue: 0,0:02:27.48,0:02:35.94,Default,,0,0,0,,we can inspect multiple bytes in memory by using the doc here, I can say show me all the memory there
Dialogue: 0,0:02:36.22,0:02:39.10,Default,,0,0,0,, And if you've ever seen a hex dump 
Dialogue: 0,0:02:39.28,0:02:46.46,Default,,0,0,0,,You might recognize this so this is showing us the first row is bytes 0 through 7 
Dialogue: 0,0:02:46.54,0:02:50.18,Default,,0,0,0,,and byte0 contains 4C byte1 contains 3C
Dialogue: 0,0:02:50.38,0:02:54.46,Default,,0,0,0,,so you know this is queue in all, but what can we actually do with it?
Dialogue: 0,0:02:54.54,0:03:01.18,Default,,0,0,0,,Well, we can't just look at memory so there I'm looking at byte 800
Dialogue: 0,0:03:01.20,0:03:03.74,Default,,0,0,0,,And these all numbers here are hexadecimal by the way.
Dialogue: 0,0:03:03.82,0:03:12.96,Default,,0,0,0,,We can change them. I could say well instead of having 0, I want 800 to have this byte 99 
Dialogue: 0,0:03:13.02,0:03:18.10,Default,,0,0,0,,And now if I look at it again I just changed memory.
Dialogue: 0,0:03:20.76,0:03:23.80,Default,,0,0,0,, I'm gonna poke a value into byte 640 here.
Dialogue: 0,0:03:30.42,0:03:37.04,Default,,0,0,0,,Up here, actually let me to use a better value I'm gonna poke value 55.
Dialogue: 0,0:03:37.22,0:03:42.32,Default,,0,0,0,, All right, you should see a blinking U up towards the top screen
Dialogue: 0,0:03:42.38,0:03:48.54,Default,,0,0,0,,Where did it come from well let's do it again let's put that value on the same byte on memory 
Dialogue: 0,0:03:48.56,0:03:49.52,Default,,0,0,0,,And there's another U 
Dialogue: 0,0:03:49.52,0:03:50.56,Default,,0,0,0,,so what just happened 
Dialogue: 0,0:03:50.70,0:03:56.76,Default,,0,0,0,,Well unlike today's modern machines which have what's called protected memory
Dialogue: 0,0:03:57.12,0:04:03.56,Default,,0,0,0,,on an 8-bit computer  like the Apple 2 you have complete access to all the memory in the system
Dialogue: 0,0:04:04.01,0:04:08.76,Default,,0,0,0,,which means you can really hose yourself you could break things quite badly 
Dialogue: 0,0:04:08.84,0:04:13.38,Default,,0,0,0,,but most devices would be what's called memory mapped to some region in memory
Dialogue: 0,0:04:13.38,0:04:18.75,Default,,0,0,0,,so the text screen which is what we're looking at here is actually mapped from I want to say values
Dialogue: 0,0:04:18.75,0:04:25.28,Default,,0,0,0,,I want to say values from say 400 to 7ff,I think something like that.
Dialogue: 0,0:04:25.80,0:04:27.86,Default,,0,0,0,,normally you would look this up if you want to know
Dialogue: 0,0:04:27.90,0:04:36.70,Default,,0,0,0,,when I changed byte 620 to 55, it poked that value that flashing U is the value 55 
Dialogue: 0,0:04:37.20,0:04:44.02,Default,,0,0,0,,That is 56 now. It's a flashing V
Dialogue: 0,0:04:44.02,0:04:46.38,Default,,0,0,0,,If I say,let's do some multiple bytes.
Dialogue: 0,0:04:46.65,0:04:55.53,Default,,0,0,0,,610 53 54 55 56 57 58 and there you could see the flashing STUVW
Dialogue: 0,0:04:55.53,0:05:01.77,Default,,0,0,0,,All right so we can look at memory and we can change memory so what? What's the big deal?
Dialogue: 0,0:05:02.20,0:05:06.86,Default,,0,0,0,,Well the monitor actually does some more interesting things.
Dialogue: 0,0:05:07.06,0:05:11.22,Default,,0,0,0,,in particular it can disassemble code 
Dialogue: 0,0:05:11.44,0:05:18.09,Default,,0,0,0,,So let's look memory location 800 again which is a very common location for programs to begin 
Dialogue: 0,0:05:18.09,0:05:26.66,Default,,0,0,0,,and instead of just hitting return here, I'm going to add an L on the end
Dialogue: 0,0:05:27.54,0:05:37.46,Default,,0,0,0,,And now could see the monitor trying to disassemble the bytes that are in code as if they are 6502 machine language.
Dialogue: 0,0:05:37.56,0:05:41.46,Default,,0,0,0,,now they might not actually be 6502 machine language 
Dialogue: 0,0:05:41.46,0:05:46.86,Default,,0,0,0,,Usually might be data just as I poked a value into the text
Dialogue: 0,0:05:47.02,0:05:54.98,Default,,0,0,0,,Maybe this is just some data that happened you might be able to interpret it as 6502 assembly
Dialogue: 0,0:05:55.10,0:05:57.84,Default,,0,0,0,,but we can actually show this in action 
Dialogue: 0,0:05:57.92,0:06:02.40,Default,,0,0,0,,so let's go ahead and write some assembly code in the monitor live 
Dialogue: 0,0:06:02.62,0:06:05.16,Default,,0,0,0,,so first I'm going to go ahead and clear this out
Dialogue: 0,0:06:05.28,0:06:10.82,Default,,0,0,0,,just throw a bunch of zero zeros in there which should be interpreted as the instruction break
Dialogue: 0,0:06:10.88,0:06:13.16,Default,,0,0,0,, there's a faster way to do a region memory 
Dialogue: 0,0:06:13.20,0:06:16.58,Default,,0,0,0,,I'll be honest it has been 30 years I don't quite remember 
Dialogue: 0,0:06:16.66,0:06:18.88,Default,,0,0,0,,Now I could see we got a bunch of breaks here 
Dialogue: 0,0:06:19.84,0:06:25.48,Default,,0,0,0,,so what you would do before you had tools,before you had an assembler
Dialogue: 0,0:06:25.52,0:06:34.52,Default,,0,0,0,,you get a notebook and you will probably have a quick reference card listing all of the op codes of the 6502 instruction set
Dialogue: 0,0:06:35.04,0:06:38.18,Default,,0,0,0,,and you would write your program in assembly language
Dialogue: 0,0:06:38.24,0:06:42.26,Default,,0,0,0,,kind of longhand what you think you would want to do on the left side of the paper 
Dialogue: 0,0:06:42.32,0:06:48.64,Default,,0,0,0,,and on the right side of the paper you would look up the opcode like you were looking up a logarithm with a slide rule
Dialogue: 0,0:06:48.82,0:06:51.82,Default,,0,0,0,,and you would write the opcode on the right-hand side 
Dialogue: 0,0:06:51.86,0:06:54.60,Default,,0,0,0,,there are actually special pads of paper to help you do this 
Dialogue: 0,0:06:54.60,0:06:58.74,Default,,0,0,0,,because it was so such a common thing to do with 8-bit computers
Dialogue: 0,0:06:59.82,0:07:02.34,Default,,0,0,0,,I'm going to write a useless program right now 
Dialogue: 0,0:07:02.62,0:07:06.60,Default,,0,0,0,,That just a couple lines of assembly code it doesn't do anything useful 
Dialogue: 0,0:07:06.72,0:07:11.20,Default,,0,0,0,,I have some programs that I have prepared for future ones of these but they don't want to go too long 
Dialogue: 0,0:07:11.58,0:07:20.96,Default,,0,0,0,,so let's go so the one opcode that is burned into my memory is a9 which stands for load the accumulator immediate mode
Dialogue: 0,0:07:21.10,0:07:24.34,Default,,0,0,0,,and you could take a value let's take 55
Dialogue: 0,0:07:24.80,0:07:29.28,Default,,0,0,0,,And just say that and now if we look if we disassemble this code
Dialogue: 0,0:07:29.34,0:07:37.46,Default,,0,0,0,, we can see the top line of the screen there it says a9 55 on the left and load the accumulator pound/dollar hex 55
Dialogue: 0,0:07:37.52,0:07:39.90,Default,,0,0,0,,load the accumulator with the value 55 
Dialogue: 0,0:07:41.18,0:07:46.86,Default,,0,0,0,,let's also then add some more 
Dialogue: 0,0:07:47.37,0:07:55.00,Default,,0,0,0,,let's try I can't remember it's 8D or 85 let's try an 8d
Dialogue: 0,0:07:56.48,0:08:02.54,Default,,0,0,0,,40 06, I hope that's a vaild opcode,
Dialogue: 0,0:08:02.62,0:08:09.60,Default,,0,0,0,,I'm actually not using quick reference card right now so I'm kind of doing this kind of surfing here
Dialogue: 0,0:08:09.60,0:08:17.68,Default,,0,0,0,,alright so we can see that in memory location 802 we have stored the accumulator in memory location 64
Dialogue: 0,0:08:17.74,0:08:25.66,Default,,0,0,0,,so let's go ahead and do some more load the accumulator with another value how about I don't know 42 
Dialogue: 0,0:08:26.00,0:08:30.06,Default,,0,0,0,,and let's go ahead and just continue we can continue to type memory in here
Dialogue: 0,0:08:30.10,0:08:34.98,Default,,0,0,0,,we just poking values of memory and we'll store that in 41 06 
Dialogue: 0,0:08:35.38,0:08:39.72,Default,,0,0,0,,these are byte swapped because of the endianness of the processor 
Dialogue: 0,0:08:39.88,0:08:46.38,Default,,0,0,0,,all right so now we have our four line assembly language program let's make it 5 lines and just finish it up with a break 
Dialogue: 0,0:08:47.92,0:08:53.12,Default,,0,0,0,,and so from the Apple 2 monitor you can run the program 
Dialogue: 0,0:08:53.28,0:08:56.80,Default,,0,0,0,,so let's go ahead and run the program
Dialogue: 0,0:08:56.94,0:09:02.97,Default,,0,0,0,, Patrick in the chat says he now sees how I could stand to play things like Space Camp, yes exactly 
Dialogue: 0,0:09:02.97,0:09:07.66,Default,,0,0,0,,so we're gonna say G, 800 G, go
Dialogue: 0,0:09:07.92,0:09:12.84,Default,,0,0,0,,We just ran our progarm, it did't do much useful. when we ran it we got the status flags
Dialogue: 0,0:09:13.32,0:09:18.18,Default,,0,0,0,, so this is showing us registers of the 6502 there are three registers 
Dialogue: 0,0:09:18.34,0:09:27.48,Default,,0,0,0,,the a is the accumulator the one register you can do arithmetic with, x and y are used for indexing generally for looping and pointer manipulation.
Dialogue: 0,0:09:27.86,0:09:30.60,Default,,0,0,0,,P are the status flags
Dialogue: 0,0:09:30.68,0:09:35.85,Default,,0,0,0,,which are a really complicated topic beyond today's talk
Dialogue: 0,0:09:35.85,0:09:39.52,Default,,0,0,0,,get into that next time if we get there and S is the stack pointer 
Dialogue: 0,0:09:40.68,0:09:49.70,Default,,0,0,0,,You can see up here on the line labeled 814 it says 00 BRK and then a flashing u and a flashing b
Dialogue: 0,0:09:49.96,0:09:56.42,Default,,0,0,0,,that was the memory we just changed,we just poked the value into that memory
Dialogue: 0,0:09:56.72,0:10:00.36,Default,,0,0,0,,now if I were to inspect that memory now those values wouldn't there 
Dialogue: 0,0:10:00.48,0:10:08.52,Default,,0,0,0,,because I poked them into the text field or or the text view the text memory map and of course
Dialogue: 0,0:10:08.56,0:10:12.06,Default,,0,0,0,, here we are changing it so that we could see things
Dialogue: 0,0:10:12.18,0:10:17.10,Default,,0,0,0,,so that's the monitor at its most basic
Dialogue: 0,0:10:17.18,0:10:23.32,Default,,0,0,0,,but we can do a little better and very quickly Apple did a little better
Dialogue: 0,0:10:23.46,0:10:26.82,Default,,0,0,0,,they implemented something called the mini assembler.
Dialogue: 0,0:10:27.04,0:10:31.58,Default,,0,0,0,,everyone knows about the monitor because sooner or later you crashed and ended up in it 
Dialogue: 0,0:10:31.78,0:10:34.66,Default,,0,0,0,,fewer people know about the mini-assembler
Dialogue: 0,0:10:36.14,0:10:44.44,Default,,0,0,0,,a mini-assembler helps you do what we just did but without having to look up the opcodes,hopefully.
Dialogue: 0,0:10:44.66,0:10:47.02,Default,,0,0,0,,you enter the mini assembler  
Dialogue: 0,0:10:47.18,0:10:51.30,Default,,0,0,0,,actually I think we won't able to do it here because I do load a disk 
Dialogue: 0,0:10:51.46,0:10:54.62,Default,,0,0,0,,Oh look at that it's actually run because this is an apple 2e 
Dialogue: 0,0:10:54.70,0:11:02.50,Default,,0,0,0,,so on an Apple 2 or plus you would have had to load a disk to do this but and we were able to do 
Dialogue: 0,0:11:02.56,0:11:08.84,Default,,0,0,0,,so let's see what happens here if we say...
Dialogue: 0,0:11:09.60,0:11:14.74,Default,,0,0,0,,great, so in case you missed what happened there I typed 800 : 
Dialogue: 0,0:11:14.82,0:11:25.16,Default,,0,0,0,,and then a9 99 like that and it immediately translated it into the opcode and kind of displayed results.
Dialogue: 0,0:11:25.82,0:11:31.72,Default,,0,0,0,,so I think if I type a colon I can keep going. let's see if that's true 
Dialogue: 0,0:11:32.26,0:11:36.06,Default,,0,0,0,,let's try and store this in memory location 300 
Dialogue: 0,0:11:36.16,0:11:38.22,Default,,0,0,0,, no it doesn't like that
Dialogue: 0,0:11:40.08,0:11:41.90,Default,,0,0,0,,Oh, that's just a space,okay.
Dialogue: 0,0:11:42.02,0:11:49.10,Default,,0,0,0,,so then we're storing that 99 in memory location 300 let's continue let's load value 88 
Dialogue: 0,0:11:51.02,0:11:55.58,Default,,0,0,0,,and let's store let's transfer a to the X register 
Dialogue: 0,0:11:55.86,0:12:03.64,Default,,0,0,0,,and then let's store register in memory location 301 so I'm not that interesting you know
Dialogue: 0,0:12:04.62,0:12:10.36,Default,,0,0,0,,I believe we have to hit the reset button to leave the mini assembler 
Dialogue: 0,0:12:10.54,0:12:13.00,Default,,0,0,0,,We're looking our program there it is
Dialogue: 0,0:12:13.06,0:12:18.06,Default,,0,0,0,,we'll run our program first let's look at memory locations 300 and 301 
Dialogue: 0,0:12:19.04,0:12:24.20,Default,,0,0,0,,they contain FF let's run our program
Dialogue: 0,0:12:24.30,0:12:31.68,Default,,0,0,0,,And let's look at memory locations 300 301 again and you can see they contain 99 and 88 
Dialogue: 0,0:12:33.16,0:12:37.90,Default,,0,0,0,,the mini-assembler is really just a translator it's translating completely on the fly
Dialogue: 0,0:12:37.94,0:12:43.40,Default,,0,0,0,,you can type comments it won't keep them there's no file management here 
Dialogue: 0,0:12:43.59,0:12:46.72,Default,,0,0,0,,there just stuff is in and gone forever 
Dialogue: 0,0:12:46.82,0:12:52.12,Default,,0,0,0,,so to write a program at significant length if you're not laws
Dialogue: 0,0:12:52.22,0:12:59.86,Default,,0,0,0,,you really need a program a real assembler that will have a nice editor will let you add comments
Dialogue: 0,0:12:59.96,0:13:03.96,Default,,0,0,0,, have meta things so you could have variables 
Dialogue: 0,0:13:04.00,0:13:13.02,Default,,0,0,0,,but this is the basics this is what you got if you bought an apple in 1978 before there was really any good software for it.
Dialogue: 0,0:13:13.12,0:13:15.20,Default,,0,0,0,,software for it this was the type of programming you could do
Dialogue: 0,0:13:15.30,0:13:18.80,Default,,0,0,0,,this was a leap above things like the KIM-1
Dialogue: 0,0:13:19.12,0:13:23.42,Default,,0,0,0,,because you actually had a display on which you could see the op
Dialogue: 0,0:13:25.18,0:13:28.98,Default,,0,0,0,,so that is the basic intro that I wanted to give 
Dialogue: 0,0:13:29.08,0:13:34.66,Default,,0,0,0,,Not so much about how to programming assembly language because I think there's tons of resources about that
Dialogue: 0,0:13:34.84,0:13:41.64,Default,,0,0,0,,just the the feel of what it was like to try to do these things before tools existed 
Dialogue: 0,0:13:41.76,0:13:50.28,Default,,0,0,0,,if I do another one of these I think the next step would be to load a assembler I would probably use.
Dialogue: 0,0:13:50.38,0:13:54.06,Default,,0,0,0,,Merlin and show it 
Dialogue: 0,0:13:54.30,0:13:57.74,Default,,0,0,0,,should we should we save that till next time 
Dialogue: 0,0:13:59.30,0:14:03.94,Default,,0,0,0,,I'm gonna go ahead and I'll do it now I might break the video here for YouTube 
Dialogue: 0,0:14:04.86,0:14:08.24,Default,,0,0,0,,But just for the people who are watching I think
Dialogue: 0,0:14:08.38,0:14:14.34,Default,,0,0,0,,let's just stick a disc in here and hopefully it will actually work.
Dialogue: 0,0:14:14.44,0:14:17.24,Default,,0,0,0,,I've like eight versions of Merlin
Dialogue: 0,0:14:32.18,0:14:33.38,Default,,0,0,0,,Waiting for it to load,
Dialogue: 0,0:14:33.42,0:14:41.40,Default,,0,0,0,, I have the emulator set to actual speed of an Apple 2 which is hideously slow of course
Dialogue: 0,0:14:41.68,0:14:49.60,Default,,0,0,0,,so here we are in Merlin,you can see that there's various options here dealing with files let's just dive right in 
Dialogue: 0,0:14:49.94,0:14:56.56,Default,,0,0,0,,hit e to edit file we get more or less a line editor I'm
Dialogue: 0,0:14:57.05,0:15:03.10,Default,,0,0,0,,A to add a line okay we can tell it where we want our program to make it exactly
Dialogue: 0,0:15:03.38,0:15:07.28,Default,,0,0,0,,Let's make it exactly the same as the one we just did
Dialogue: 0,0:15:07.36,0:15:11.68,Default,,0,0,0,,so we'll say ORG dollar 800
Dialogue: 0,0:15:12.02,0:15:16.86,Default,,0,0,0,,this is not a 6502 opcode that's a hint to the assembler 
Dialogue: 0,0:15:17.88,0:15:29.66,Default,,0,0,0,,we could also define some symbols so let's say head is equal to 0300, tail is equal to 0301 
Dialogue: 0,0:15:30.58,0:15:38.92,Default,,0,0,0,,we can have comments this awesome program write some values
Dialogue: 0,0:15:39.14,0:15:42.68,Default,,0,0,0,,And then we just write our code as as we'd like to 
Dialogue: 0,0:15:42.80,0:15:52.62,Default,,0,0,0,,the hardest part of doing this would actually be using a line editor like this
Dialogue: 0,0:15:52.78,0:15:55.84,Default,,0,0,0,,full-screen editors we're all used to today 
Dialogue: 0,0:15:56.08,0:16:01.76,Default,,0,0,0,,so I want to store this in memory location 300 so I'll just use the symbolic name i defined 
Dialogue: 0,0:16:03.02,0:16:10.64,Default,,0,0,0,,In fact I will say 88 whatever they say  transferred to the Y register this time
Dialogue: 0,0:16:10.80,0:16:15.98,Default,,0,0,0,,store Y in tail and then we'll finish up with a break
Dialogue: 0,0:16:16.22,0:16:21.63,Default,,0,0,0,,Okay not a very interesting program but I want to stick with doing the same thing in different ways
Dialogue: 0,0:16:21.63,0:16:24.86,Default,,0,0,0,,hey I hit return on an empty line here.
Dialogue: 0,0:16:24.98,0:16:27.56,Default,,0,0,0,,now I can assemble the program
Dialogue: 0,0:16:28.22,0:16:32.24,Default,,0,0,0,,In this case I happen to know because I read the documentation 
Dialogue: 0,0:16:32.90,0:16:40.82,Default,,0,0,0,,the lack of online help by the way is a consistent feature of early Apple 2 programs 
Dialogue: 0,0:16:41.00,0:16:47.24,Default,,0,0,0,,you simplely could not get anything done without the manual
Dialogue: 0,0:16:47.52,0:16:56.30,Default,,0,0,0,,The memory you had on the computer was so limited that the add-on online help system to most of programs
Dialogue: 0,0:16:56.30,0:16:58.46,Default,,0,0,0,,you wouldn't have room for your program
Dialogue: 0,0:16:58.62,0:17:01.96,Default,,0,0,0,,so let's go ahead and assemble it I'm answering no to that question 
Dialogue: 0,0:17:01.98,0:17:09.34,Default,,0,0,0,,You could see bunch of op codes up here it kind of shows us what it looked like it mentions that we have a few symbols 
Dialogue: 0,0:17:10.76,0:17:17.34,Default,,0,0,0,,and then I think we want to quit so we can now save the source code.
Dialogue: 0,0:17:17.54,0:17:21.96,Default,,0,0,0,,let's just call it test program
Dialogue: 0,0:17:23.08,0:17:30.81,Default,,0,0,0,,Is gonna save that as TESTPROG dot s s for assembly language we can then save the object code
Dialogue: 0,0:17:30.81,0:17:35.57,Default,,0,0,0,,Which is our actual program that we're going to run 
Dialogue: 0,0:17:35.65,0:17:43.48,Default,,0,0,0,,hopefully this will work I'm going to quit out of the out of Merlin let's look at our disk 
Dialogue: 0,0:17:44.84,0:17:47.32,Default,,0,0,0,,A bunch of stuff here
Dialogue: 0,0:17:48.36,0:17:52.44,Default,,0,0,0,,Of course I save that right to the assembler disk which is not very cool 
Dialogue: 0,0:17:52.86,0:18:00.79,Default,,0,0,0,,let's just really quickly drop into the monitor make sure that the program is not in memory you can see it's not
Dialogue: 0,0:18:01.58,0:18:07.90,Default,,0,0,0,,bunch of breaks so memory is empty and let's run our run we'll run it all at once
Dialogue: 0,0:18:08.04,0:18:12.06,Default,,0,0,0,,just use brun we'll run it all at once what do they call it TESTPROG
Dialogue: 0,0:18:17.44,0:18:24.64,Default,,0,0,0,,we can see the registers already look correct our program did what it was supposed to do 
Dialogue: 0,0:18:30.72,0:18:38.58,Default,,0,0,0,,That's the long and short of it this is kind of what the tools looked like in 1978 to 1982
Dialogue: 0,0:18:38.64,0:18:41.40,Default,,0,0,0,,and they got better over time you'll see that 
Dialogue: 0,0:18:41.52,0:18:49.62,Default,,0,0,0,,If you pick up versions of Merlin from one of the Apple 2 disk archives you can see how it improves overtime
Dialogue: 0,0:18:49.74,0:18:55.38,Default,,0,0,0,,eventually they got a real full screen editor instead of line editor
Dialogue: 0,0:18:55.48,0:18:58.18,Default,,0,0,0,,but it's really a different world
Dialogue: 0,0:18:58.30,0:19:03.30,Default,,0,0,0,,and if I do another one of these I think the next one will be writing an actual program 
Dialogue: 0,0:19:03.48,0:19:09.32,Default,,0,0,0,,and trying to one explain some of the vagaries at the 6502 
Dialogue: 0,0:19:09.58,0:19:19.50,Default,,0,0,0,,how programming even in assembly language is different on that CPU than on a let's say more full featured CPU
Dialogue: 0,0:19:19.70,0:19:25.04,Default,,0,0,0,,and second I might try to motivate why would anyone put themselves through this
Dialogue: 0,0:19:25.16,0:19:31.12,Default,,0,0,0,,and the one sentence answer is man the Apple 2 was really really slow
Dialogue: 0,0:19:31.26,0:19:37.92,Default,,0,0,0,,and so any speed advantage you can get by directly an assembly language was super valuable
Dialogue: 0,0:19:38.04,0:19:40.42,Default,,0,0,0,, we can go through an example next time 
Dialogue: 0,0:19:40.84,0:19:42.90,Default,,0,0,0,,that's it. thanks for tuning in
Dialogue: 0,0:19:42.98,0:19:53.03,Default,,0,0,0,, and it's good taking this stroll down memory constrained lane with you, bye!
